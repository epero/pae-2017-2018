package ihm.servlet;

import static util.Util.hashpw;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.eclipse.jetty.servlet.DefaultServlet;
import com.auth0.jwt.JWTSigner;
import com.auth0.jwt.JWTVerifier;
import com.owlike.genson.Genson;
import biz.ucc.UserUCC;
import util.AppContext;
import util.AppContext.dependanceInjection;


class DispatcherServlet extends DefaultServlet {

  @dependanceInjection
  private static UserUCC userUCC;


  @Override
  protected void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {

    // TODO Parcourir les dossiers www et www/js pour cr√©er les tag <script> contenant le nom de
    // fichier .js et les append au prefooter.html
    if (req.getRequestURI().equals("/")) {
      File[] files = new File("inc").listFiles();
      for (File file : files) {
        Files.copy(file.toPath(), resp.getOutputStream());
      }

    } else {
      super.doGet(req, resp);
    }
  }

  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    resp.setContentType("text/html; charset=UTF-8");
    String action = req.getParameter("action");
    String json;

    switch (action) {
      case "signin":
        signin(req, resp);
        break;
      case "signup":
        signup(req, resp);
        break;
      case "whoami":
        String whoami = getCurrentUser(req);
        json = new Genson().serialize(whoami);
        resp.setContentType("application/json");
        resp.getOutputStream().write(json.getBytes());
        break;
      default:
        break;
    }
  }

  private void signin(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    String login = req.getParameter("user");
    String password = req.getParameter("pswd");
    String remoteAddr = req.getRemoteAddr();

    // si l utilisateur peut se connecter
    if (userUCC.seConnecter(login, password) != null) {
      resp.getOutputStream().write("ok".getBytes(Charset.forName("UTF-8")));

      Map<String, Object> claims = new HashMap<>();
      claims.put("user", login);
      claims.put("ip", remoteAddr);

      String secret = AppContext.getValueProp("JWTSecret");

      String token = new JWTSigner(secret).sign(claims);

      Cookie cookie = new Cookie("token", token);
      cookie.setPath("/");
      cookie.setMaxAge(60 * 60 * 24 * 365);
      resp.addCookie(cookie);

    } else {
      resp.getOutputStream().write("ko".getBytes(Charset.forName("UTF-8")));
    }

  }

  private void signup(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    String login = req.getParameter("user");
    String password = req.getParameter("pswd");
    // TO CONTINUE

    // VINCENT
    String pw_hash = hashpw(password);
  }

  private String getCurrentUser(HttpServletRequest req) {
    String whoami = null;
    String token = null;

    Cookie[] cookies = req.getCookies();
    if (cookies != null) {
      for (Cookie cookie : cookies) {
        if ("token".equals(cookie.getName()) && cookie.getSecure()) {
          token = cookie.getValue();
        } else if ("token".equals(cookie.getName()) && token == null) {
          token = cookie.getValue();
        }
      }
    }
    if (token == null)
      return null;

    Object userID = null;
    try {
      Map<String, Object> decodedPayload =
          new JWTVerifier(AppContext.getValueProp("JWTSecret")).verify(token);
      userID = decodedPayload.get("ip");
      if (!req.getRemoteAddr().equals(decodedPayload.get("ip"))) {
        return null;
      }
      whoami = (String) decodedPayload.get("nom");
    } catch (Exception e) {
      // ne rien faire
    }
    return whoami;
  }

}
