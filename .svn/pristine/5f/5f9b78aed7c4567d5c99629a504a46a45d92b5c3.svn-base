package biz.uow;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Logger;
import dal.dao.ContactDao;
import dal.dao.DaoGenerique;
import dal.dao.EntrepriseDao;
import dal.dao.PersonneContactDao;
import dal.dao.StageDao;
import dal.dao.UserDao;
import dal.services.DalServices;
import exceptions.FatalException;
import util.AppContext.DependanceInjection;

public class UnitOfWorkImpl implements UnitOfWork {

  @DependanceInjection
  private DalServices dalServices;

  @DependanceInjection
  private ContactDao contactDao;
  @DependanceInjection
  private EntrepriseDao entrepriseDao;
  @DependanceInjection
  private PersonneContactDao personneContactDao;
  @DependanceInjection
  private StageDao stageDao;
  @DependanceInjection
  private UserDao userDao;

  private Map<String, DaoGenerique> mapDaos;
  ThreadLocal<LocalListsUow> localUow;

  public UnitOfWorkImpl() {
    mapDaos.put(entrepriseDao.getClass().getSimpleName().replaceAll("Dao", ""),
        (DaoGenerique) entrepriseDao);
    mapDaos.put(contactDao.getClass().getSimpleName().replaceAll("Dao", ""),
        (DaoGenerique) contactDao);
    mapDaos.put(personneContactDao.getClass().getSimpleName().replaceAll("Dao", ""),
        (DaoGenerique) personneContactDao);
    mapDaos.put(stageDao.getClass().getSimpleName().replaceAll("Dao", ""), (DaoGenerique) stageDao);
    mapDaos.put(userDao.getClass().getSimpleName().replaceAll("Dao", ""), (DaoGenerique) userDao);

  }

  public void insert(Object object, int cid) {
    if (localUow.get().mapUpdate.containsKey(object.getClass().getSimpleName() + cid))
      localUow.get().mapUpdate.remove(object.getClass().getSimpleName() + cid);
    if (localUow.get().mapDelete.containsKey(object.getClass().getSimpleName() + cid))
      localUow.get().mapDelete.remove(object.getClass().getSimpleName() + cid);

    localUow.get().mapInsert.put(object.getClass().getSimpleName() + cid, object);
  }

  public void update(Object object, int cid) {
    // quid si dans liste delete?
    if (localUow.get().mapInsert.containsKey(object.getClass().getSimpleName() + cid))
      localUow.get().mapInsert.put(object.getClass().getSimpleName() + cid, object);
    else
      localUow.get().mapUpdate.put(object.getClass().getSimpleName() + cid, object);

    if (localUow.get().mapDelete.containsKey(object.getClass().getSimpleName() + cid))
      localUow.get().mapDelete.remove(object.getClass().getSimpleName() + cid);
  }

  public void delete(Object object, int cid) {
    if (localUow.get().mapInsert.containsKey(object.getClass().getSimpleName() + cid))
      localUow.get().mapInsert.remove(object.getClass().getSimpleName() + cid);
    if (localUow.get().mapUpdate.containsKey(object.getClass().getSimpleName() + cid))
      localUow.get().mapUpdate.remove(object.getClass().getSimpleName() + cid);

    localUow.get().mapDelete.put(object.getClass().getSimpleName() + cid, object);
    localUow.get().mapAllObjects.put(object.getClass().getSimpleName() + cid, object);
  }

  public void startTransBiz() {
    localUow = new ThreadLocal<>();
    dalServices.startTransaction();
  }

  public void commitTransBiz() {
    DaoGenerique daoGenerique;
    try {
      for (Entry<String, Object> entry : localUow.get().mapInsert.entrySet()) {
        daoGenerique =
            mapDaos.get(entry.getValue().getClass().getSimpleName().replaceAll("Dto", ""));
        localUow.get().mapAllObjects.put(entry.getKey(), daoGenerique.insert(entry.getValue()));
      }

      for (Entry<String, Object> entry : localUow.get().mapUpdate.entrySet()) {
        daoGenerique =
            mapDaos.get(entry.getValue().getClass().getSimpleName().replaceAll("Dto", ""));
        localUow.get().mapAllObjects.put(entry.getKey(), daoGenerique.update(entry.getValue()));
      }

      /*
       * Map<String, Object> mapAfterDelete = new HashMap<>(); for (Entry<String, Object> entry :
       * localUow.get().mapDelete.entrySet()) { mapAfterDelete.put(entry.getKey(),
       * daoGenerique.delete(entry.getValue())); }
       */

    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
  }

  public Object getObjAfterTrans(Object object, int cid) {
    if (localUow.get().mapAllObjects.containsKey(object.getClass().getSimpleName() + cid))
      return localUow.get().mapAllObjects.get(object.getClass().getSimpleName() + cid);
    throw new FatalException("Erreur de programmation");
  }


  private class LocalListsUow {
    private Map<String, Object> mapInsert = new HashMap<>();
    private Map<String, Object> mapUpdate = new HashMap<>();
    private Map<String, Object> mapDelete = new HashMap<>();
    private Map<String, Object> mapAllObjects = new HashMap<>();

  }

}
