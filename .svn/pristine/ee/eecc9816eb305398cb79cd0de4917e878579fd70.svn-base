package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import biz.entreprise.EntrepriseDto;
import biz.factory.BizFactory;
import biz.pdc.PersonneContactDto;
import dal.services.DalBackendServices;
import exceptions.FatalException;
import util.AppContext.DependanceInjection;
import util.DaoUtil;


class PersonneContactDaoImpl implements PersonneContactDao {

  @DependanceInjection
  private DalBackendServices dalBackendService;

  @DependanceInjection
  private BizFactory factory;

  @DependanceInjection
  private DaoUtil daoUtil;

  private static final String QUERY_GET_PERSONNES_CONTACT_BY_ID_ENTREPRISE =
      "SELECT pc.id_personne_contact, pc.nom, pc.prenom, "
          + "pc.tel, pc.email, pc.entreprise, pc.num_version "
          + "FROM stagify.personnes_contact pc WHERE pc.entreprise = ?";

  private static final String QUERY_INSERT_PERSONNE_CONTACT =
      "INSERT INTO stagify.personnes_contact(nom, prenom, tel, email, entreprise, num_version)"
          + "VALUES (?,?,?,?,?,?)";

  private static final String QUERY_GET_PERSONNE_CONTACT =
      "SELECT id_personne_contact, nom, prenom, tel, email, entreprise, num_version "
          + "FROM stagify.personnes_contact WHERE id_personne_contact= ?";

  private static final String QUERY_PERSONNE_DE_CONTACT_APPARTIENT_ENTREPRISE =
      "SELECT * FROM stagify.personnes_contact WHERE id_personne_contact = ? AND entreprise = ?";

  private static final String QUERY_GET_RESPONSABLES_STAGE =
      "SELECT DISTINCT pc.id_personne_contact, pc.nom, pc.prenom,"
          + " pc.tel, pc.email, pc.entreprise, pc.num_version, "
          + "e.id_entreprise, e.denomination, e.adresse, e.numero, e.boite,"
          + " e.code_postal, e.ville, e.email, e.tel, e.est_black_liste, e.num_version "
          + "FROM stagify.personnes_contact pc, stagify.stages s, stagify.entreprises e "
          + "WHERE s.responsable = pc.id_personne_contact AND s.entreprise = e.id_entreprise";

  @Override
  public List<PersonneContactDto> getPersonnesContactByIdEntreprise(int idEntreprise) {
    PreparedStatement ps =
        dalBackendService.getPreparedStatement(QUERY_GET_PERSONNES_CONTACT_BY_ID_ENTREPRISE);
    List<PersonneContactDto> personnes;
    daoUtil.setPreparedStatement(ps, idEntreprise);

    try (ResultSet rs = ps.executeQuery()) {
      PersonneContactDto personne = factory.getPersonneContactVide();
      personnes = (List<PersonneContactDto>) (Object) daoUtil.setResultSet(personne.getClass(), rs);

    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException(
          "Erreur lors de la récupération des personnes de contact dans la base de données.");
    }
    return personnes;
  }

  public PersonneContactDto insertPersonneContact(PersonneContactDto personneContact) {
    PreparedStatement ps =
        dalBackendService.getPreparedStatementForInsert(QUERY_INSERT_PERSONNE_CONTACT);
    daoUtil.setPreparedStatement(ps, personneContact.getNom(), personneContact.getPrenom(),
        personneContact.getTel(), personneContact.getEmail(), personneContact.getEntreprise(),
        personneContact.getNumVersion());

    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
          if (generatedKeys.next()) {
            personneContact.setIdPersonneContact((generatedKeys.getInt(1)));
          }
        }
        return personneContact;
      } else {
        throw new FatalException("Erreur de programmaton");
      }

    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur lors de l'accès à la DB");
    }


  }

  @Override
  public PersonneContactDto getPersonneContact(int idPersonneContact) {
    PreparedStatement ps = dalBackendService.getPreparedStatement(QUERY_GET_PERSONNE_CONTACT);
    daoUtil.setPreparedStatement(ps, idPersonneContact);
    try (ResultSet rs = ps.executeQuery();) {
      PersonneContactDto personneContact = factory.getPersonneContactVide();
      List<Object> listePersonnesContact = daoUtil.setResultSet(personneContact.getClass(), rs);
      switch (listePersonnesContact.size()) {
        case 0:
          return null;
        case 1:
          return (PersonneContactDto) listePersonnesContact.get(0);
        default:
          throw new FatalException(
              "clef primaire entreprise dupliquée,contactez administrateur système");
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
  }

  @Override
  public boolean personneDeContactAppartientEntreprise(int idPersonneContact, int idEntreprise) {
    PreparedStatement ps =
        dalBackendService.getPreparedStatement(QUERY_PERSONNE_DE_CONTACT_APPARTIENT_ENTREPRISE);
    daoUtil.setPreparedStatement(ps, idPersonneContact, idEntreprise);

    try (ResultSet resultSet = ps.executeQuery()) {
      if (resultSet.next()) {
        return true;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur acces Db");
    }
  }

  @Override
  public List<PersonneContactDto> getResponsablesStage() {
    PreparedStatement ps = dalBackendService.getPreparedStatement(QUERY_GET_RESPONSABLES_STAGE);

    List<PersonneContactDto> responsables = new ArrayList<>();

    try (ResultSet rs = ps.executeQuery()) {
      while (rs.next()) {
        PersonneContactDto responsable = remplirResponsableEtEntreprise(rs);
        responsables.add(responsable);
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException(
          "Erreur lors de la récupération des entreprises dans la base de données.");
    }
    return responsables;
  }

  private PersonneContactDto remplirResponsableEtEntreprise(ResultSet rs) throws SQLException {
    PersonneContactDto responsable = factory.getPersonneContactVide();
    // responsable
    responsable.setIdPersonneContact(rs.getInt(1));
    responsable.setNom(rs.getString(2));
    responsable.setPrenom(rs.getString(3));
    responsable.setTel(rs.getString(4));
    responsable.setEmail(rs.getString(5));
    responsable.setEntreprise(rs.getInt(6));
    responsable.setNumVersion(rs.getInt(7));

    EntrepriseDto entreprise = factory.getEntrepriseVide();
    // entreprise
    entreprise.setIdEntreprise(rs.getInt(8));
    entreprise.setDenomination(rs.getString(9));
    entreprise.setAdresse(rs.getString(10));
    entreprise.setNumero(rs.getString(11));
    String boite = rs.getString(12);
    if (boite != null) {
      entreprise.setBoite(boite);
    }
    entreprise.setCodePostal(rs.getString(13));
    entreprise.setVille(rs.getString(14));
    entreprise.setEmail(rs.getString(15));
    entreprise.setTel(rs.getString(16));
    entreprise.setEstBlackListe(rs.getBoolean(17));
    entreprise.setNumVersion(rs.getInt(18));

    // lier l'entreprise au responsable
    responsable.setEntrepriseDto(entreprise);
    return responsable;
  }

}
