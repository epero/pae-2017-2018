package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;
import biz.user.UserDto;
import exceptions.FatalException;


class UserDaoImpl extends DaoGeneriqueImpl<UserDto> implements UserDao {

  // private final String QUERY_GET_USER_PAR_PSEUDO =
  // "SELECT * FROM stagify.utilisateurs WHERE pseudo = ?";

  // private final String QUERY_GET_ALL_USERS = "SELECT * FROM stagify.utilisateurs u "
  // + "WHERE u.est_admin = false AND u.annee_academique = ? ";

  // private final String QUERY_PSEUDO_USER_EXISTE =
  // "SELECT pseudo FROM stagify.utilisateurs WHERE pseudo = ?";

  // private final String QUERY_EMAIL_USER_EXISTE =
  // "SELECT email FROM stagify.utilisateurs WHERE email = ?";

  /*
   * private final String QUERY_UPDATE_NOMBRE_CONTACT_ETAT_PLUS_AVANCE =
   * "UPDATE stagify.utilisateurs SET nb_contacts = ?, etat_plus_avance = ?," +
   * " num_version = num_version+1 WHERE id_utilisateur = ? AND num_version = ?";
   * 
   * private final String QUERY_UPDATE_ETAT_PLUS_AVANCE =
   * "UPDATE stagify.utilisateurs SET etat_plus_avance = ?, num_version = num_version+1 " +
   * "WHERE id_utilisateur = ?  AND num_version = ?";
   * 
   * private final String QUERY_UPDATE_MDP =
   * "UPDATE stagify.utilisateurs SET mdp = ?, num_version = num_version+1 " +
   * "WHERE id_utilisateur = ?  AND num_version = ?";
   */

  /*
   * private final String QUERY_GET_STUDENTS_STATS = "select count(*) total, " +
   * "sum(case when etat_plus_avance = 0 then 1 else 0 end) aucunContact, " +
   * "sum(case when etat_plus_avance = 1 then 1 else 0 end) contactRefuses, " +
   * "sum(case when etat_plus_avance = 2 then 1 else 0 end) contactInities, " +
   * "sum(case when etat_plus_avance = 3 then 1 else 0 end) contactAcceptes, " +
   * "sum(case when etat_plus_avance = 4 then 1 else 0 end) contactStageEnOrdre " +
   * "from stagify.utilisateurs where est_admin = 'f' and annee_academique = ?";
   */

  /*
   * private final String QUERY_GET_STUDENTS_STATS_PAR_ID_USER = "select count(*) total, " +
   * "sum(case when etat=0 then 1 else 0 end) contactsInities, " +
   * "sum(case when etat=2 then 1 else 0 end) contactsPris, " +
   * "sum(case when etat=1 then 1 else 0 end) contactsRefuses " +
   * "from stagify.contacts where utilisateur = ?";
   */

  @Override
  public UserDto getUser(String pseudo) {

    PreparedStatement preparedStatement;
    UserDto user;
    List<UserDto> users;

    try {
      System.out.println(super.dalBackendServices == null);
      preparedStatement = super.dalBackendServices
          .getPreparedStatement(appContext.getValueProp("query_get_user_par_pseudo"));
      daoUtil.setPreparedStatement(preparedStatement, pseudo);
      try (ResultSet resultSet = preparedStatement.executeQuery()) {
        user = (UserDto) factory.getUserVide();
        users = (List<UserDto>) daoUtil.setResultSet(user.getClass(), resultSet);
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException(
          "Erreur lors de la récupération de l'utilisateur dans la base de données.");
    }
    if (users == null || users.isEmpty()) {
      return null;
    }
    return users.get(0);
  }

  @Override
  public UserDto getUser(int idUtilisateur) {
    return super.get(idUtilisateur);
  }

  @Override
  public List<UserDto> getAllUsers(String anneeAcademique) {
    PreparedStatement ps = super.dalBackendServices
        .getPreparedStatement(appContext.getValueProp("query_get_all_users"));
    daoUtil.setPreparedStatement(ps, anneeAcademique);

    List<UserDto> users;

    try (ResultSet rs = ps.executeQuery()) {
      // UserDto user = factory.getUserVide();
      users = (List<UserDto>) (Object) daoUtil
          .setResultSet(appContext.getClassValueProp("biz.user.UserDto"), rs);

    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException(
          "Erreur lors de la récupération des entreprises dans la base de données.");
    }
    return users;
  }

  public UserDto updateUser(UserDto user) {
    return super.update(user);
  }


  @Override
  public boolean pseudoUserExiste(String pseudo) {
    PreparedStatement ps = super.dalBackendServices
        .getPreparedStatement(appContext.getValueProp("query_pseudo_user_existe"));
    daoUtil.setPreparedStatement(ps, pseudo);
    try (ResultSet rs = ps.executeQuery()) {
      if (rs.next()) {
        return true;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur acces Db");
    }
  }

  @Override
  public boolean emailUserExiste(String email) {
    PreparedStatement ps = super.dalBackendServices
        .getPreparedStatement(appContext.getValueProp("query_email_user_existe"));
    daoUtil.setPreparedStatement(ps, email);
    try (ResultSet resultSet = ps.executeQuery()) {
      if (resultSet.next()) {
        return true;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur acces Db");
    }
  }

  @Override
  public UserDto insertUser(UserDto user) {
    return super.insert(user);
  }



  /*
   * @Override public UserDto updateNbrContEtatPlusAvance(UserDto user) { PreparedStatement ps =
   * super.dalBackendServices.getPreparedStatement(QUERY_UPDATE_NOMBRE_CONTACT_ETAT_PLUS_AVANCE);
   * daoUtil.setPreparedStatement(ps, user.getNbContacts(), user.getEtatPlusAvance(),
   * user.getIdUtilisateur(), user.getNumVersion());
   * 
   * return executeResultSet(user, ps); }
   * 
   * @Override public UserDto updateEtatPlusAvance(UserDto user) { PreparedStatement ps =
   * super.dalBackendServices.getPreparedStatement(QUERY_UPDATE_ETAT_PLUS_AVANCE);
   * daoUtil.setPreparedStatement(ps, user.getEtatPlusAvance(), user.getIdUtilisateur(),
   * user.getNumVersion());
   * 
   * return executeResultSet(user, ps); }
   * 
   * 
   * 
   * public UserDto updateMdp(UserDto utilisateur) { PreparedStatement ps =
   * super.dalBackendServices.getPreparedStatement(QUERY_UPDATE_MDP);
   * daoUtil.setPreparedStatement(ps, utilisateur.getMdp(), utilisateur.getIdUtilisateur(),
   * utilisateur.getNumVersion());
   * 
   * return executeResultSet(utilisateur, ps); }
   */


  @Override
  public HashMap<String, Integer> getStudentsStats(String anneeAcademique) {
    PreparedStatement preparedStatement;
    HashMap<String, Integer> stats;
    try {
      preparedStatement = super.dalBackendServices
          .getPreparedStatement(appContext.getValueProp("query_get_student_stats"));
      daoUtil.setPreparedStatement(preparedStatement, anneeAcademique);
      try (ResultSet resultSet = preparedStatement.executeQuery()) {
        if (resultSet.next()) {
          stats = new HashMap();
          stats.put(resultSet.getMetaData().getColumnName(2), resultSet.getInt(2));
          stats.put(resultSet.getMetaData().getColumnName(3), resultSet.getInt(3));
          stats.put(resultSet.getMetaData().getColumnName(4), resultSet.getInt(4));
          stats.put(resultSet.getMetaData().getColumnName(5), resultSet.getInt(5));
          stats.put(resultSet.getMetaData().getColumnName(6), resultSet.getInt(6));
        } else {
          throw new FatalException("Erreur de programmation");
        }
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur lors de la récupération des stats dans la base de données.");
    }
    if (stats == null || stats.isEmpty()) {
      throw new FatalException("Erreur de programmation");
    }
    return stats;
  }

  @Override
  public HashMap<String, Integer> getStudentStats(int idUser) {
    PreparedStatement preparedStatement;
    HashMap<String, Integer> stats;
    try {
      preparedStatement = super.dalBackendServices
          .getPreparedStatement(appContext.getValueProp("query_get_students_stats_par_id_user"));
      daoUtil.setPreparedStatement(preparedStatement, idUser);
      try (ResultSet resultSet = preparedStatement.executeQuery()) {
        if (resultSet.next()) {
          stats = new HashMap();
          stats.put(resultSet.getMetaData().getColumnName(2), resultSet.getInt(2));
          stats.put(resultSet.getMetaData().getColumnName(3), resultSet.getInt(3));
          stats.put(resultSet.getMetaData().getColumnName(4), resultSet.getInt(4));
        } else {
          throw new FatalException("Erreur de programmation");
        }
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur lors de la récupération des stats dans la base de données.");
    }
    if (stats == null || stats.isEmpty()) {
      throw new FatalException("Erreur de progrmmation");
    }
    return stats;
  }

  /*
   * private UserDto executeResultSet(UserDto user, PreparedStatement ps) { try { int codeRetour =
   * ps.executeUpdate(); if (codeRetour == 1) { user.setNumVersion(user.getNumVersion() + 1); return
   * user; } else if (codeRetour == 0) { throw new OptimisticLockException(
   * "L'utilisateur a été modifié depuis le chargement de cette page",
   * getUser(user.getIdUtilisateur())); } else { throw new
   * FatalException("Erreur de programmation"); } } catch (SQLException ex) {
   * Logger.getLogger("stagifyLogger").fine(ex.getMessage()); throw new
   * FatalException("Erreur lors de l'accès DB"); } }
   */


}
