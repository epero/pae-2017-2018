package ihm.services;

import java.io.IOException;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.owlike.genson.Genson;
import com.owlike.genson.GensonBuilder;
import biz.factory.BizFactory;
import biz.ucc.UserUcc;
import biz.user.UserDto;
import biz.user.UserImpl;
import exceptions.OptimisticLockException;
import ihm.servlet.DispatcherServlet;
import util.AppContext.DependanceInjection;
import util.Util;

public class UserServiceImpl implements UserService {

  @DependanceInjection
  UtilService utilService;
  @DependanceInjection
  BizFactory factory;
  @DependanceInjection
  UserUcc userUcc;

  private Genson genson = new GensonBuilder().useIndentation(true)
      .useDateFormat(new SimpleDateFormat("dd-MM-yyyy")).create();

  private Genson gUser = new GensonBuilder().useIndentation(true).exclude("mdp", UserImpl.class)
      .exclude("dateInscription", UserImpl.class).create();

  private Genson gSetMdp =
      new GensonBuilder().useIndentation(true).exclude("dateNaissance").create();

  private Genson gSignIn = new GensonBuilder().useIndentation(true).exclude("mdp").exclude("tel")
      .exclude("email").exclude("dateInscription").exclude("dateNaissance").create();

  private Genson gUserCurrYear = new GensonBuilder().useIndentation(true).exclude("mdp").create();


  private String json;


  public void fillChartStudentAsStudent(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    json =
        genson.serialize(userUcc.getStudentStats(DispatcherServlet.currentUser.getIdUtilisateur()));
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void fillChartStudentAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    UserDto selectedStud = factory.getUserVide();
    selectedStud.setIdUtilisateur(Integer.parseInt(req.getParameter("selectedStud")));
    json = genson.serialize(userUcc.getStudentStats(selectedStud.getIdUtilisateur()));
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void fillChartTeacher(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = genson.serialize(userUcc.getStudentsStats());
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void getInfosPersoUser(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    UserDto infosPerso = DispatcherServlet.currentUser;

    if (infosPerso != null) {
      json = gUser.serialize(infosPerso);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  public void setInfosPersoUser(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("user");

    Map<String, Object> mapJson = genson.deserialize(json, Map.class);

    UserDto userDb;

    try {
      userDb = userUcc.updateInfoUtilisateur(DispatcherServlet.currentUser.getIdUtilisateur(),
          Integer.parseInt("" + mapJson.get("numVersion")), "" + mapJson.get("nom"),
          "" + mapJson.get("prenom"), Util.jsonToLocalDate(json, "dateNaissance"),
          "" + mapJson.get("email"), "" + mapJson.get("tel"));

      if (userDb != null) {
        json = gUser.serialize(userDb);
        req.getSession().setAttribute("userDb", userDb);
        resp.setContentType("application/json");
        resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
      } else {
        utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
      }
    } catch (OptimisticLockException ex) {
      userDb = (UserDto) ex.getObjetEnDb();
      req.getSession().setAttribute("userDb", userDb);
      utilService.renvoyerCodeErrEtMessEtObj(resp, ex, 409, userDb, gUser);
    }
  }

  public void setMdpUser(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    String userNumVersion = req.getParameter("userNumVersion");
    String mdpActuel = req.getParameter("mdpActuel");
    String newMdp1 = req.getParameter("nouveauMdp1");
    String newMdp2 = req.getParameter("nouveauMdp2");

    UserDto userAVerifier = factory.getUserVide();

    gSetMdp.deserializeInto(json, userAVerifier);
    System.out.println(userAVerifier);

    UserDto userDb;

    try {
      userDb = userUcc.updateMdpUtilisateur(DispatcherServlet.currentUser.getIdUtilisateur(),
          Integer.parseInt(userNumVersion), mdpActuel, newMdp1, newMdp2);
      if (userDb != null) {
        json = gUser.serialize(userDb);
        req.getSession().setAttribute("userDb", userDb);
        resp.setContentType("application/json");
        resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
      } else {
        utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
      }

    } catch (OptimisticLockException ex) {
      userDb = (UserDto) ex.getObjetEnDb();
      req.getSession().setAttribute("userDb", userDb);
      utilService.renvoyerCodeErrEtMessEtObj(resp, ex, 409, userDb, gUser);
    }
  }

  public void signin(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    json = req.getParameter("userAVerif");
    Map<String, String> mapJson = genson.deserialize(json, Map.class);

    // Si l'utilisateur peut se connecter
    UserDto userDb = userUcc.seConnecter(mapJson.get("pseudo"), mapJson.get("mdp"));

    if (userDb != null) {
      json = gSignIn.serialize(userDb);
      utilService.startSession(userDb, req, resp);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Le nom d'utilisateur ou le mot de passe est incorrect", 401);
    }
  }

  public void signup(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    json = req.getParameter("newUser");
    UserDto userAVerif = factory.getUserVide();

    gSetMdp.deserializeInto(json, userAVerif);

    userAVerif.setDateNaissance(Util.jsonToLocalDate(json, "dateNaissance"));

    UserDto userDb = userUcc.sinscrire(userAVerif);
    if (userDb != null) {
      Genson gen = new GensonBuilder().useIndentation(true).exclude("mdp").exclude("tel")
          .exclude("email").exclude("dateInscription").exclude("dateNaissance").create();
      json = gen.serialize(userDb);

      utilService.startSession(userDb, req, resp);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  // TODO MEME CHOSE QUE visualiserUsers
  public void visualiserStudCurYear(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    List<UserDto> users = userUcc.visualiserUsersAnneeCourante();
    if (users != null) {
      json = gUserCurrYear.serialize(users);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  // TODO MEME CHOSE QUE visualiserStudCurYear
  public void visualiserUsers(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    List<UserDto> users = userUcc.visualiserUsersAnneeCourante();
    if (users != null) {
      json = gUserCurrYear.serialize(users);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

}
