package ihm.servlet;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.eclipse.jetty.servlet.DefaultServlet;
import com.auth0.jwt.JWTSigner;
import com.auth0.jwt.JWTVerifier;
import com.owlike.genson.Genson;
import com.owlike.genson.GensonBuilder;
import biz.factory.BizFactory;
import biz.ucc.UserUcc;
import biz.user.UserDto;
import biz.user.UserImpl;
import exceptions.BizException;
import util.AppContext;
import util.AppContext.DependanceInjection;


class DispatcherServlet extends DefaultServlet {


  @DependanceInjection
  private AppContext appContext;
  @DependanceInjection
  private UserUcc userUCC;
  @DependanceInjection
  private BizFactory factory;

  private String json;
  private Genson genson;

  public DispatcherServlet() {
    genson = new GensonBuilder().useDateFormat(new SimpleDateFormat("dd-MM-yyyy")).create();
  }

  @Override
  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    // TODO Parcourir les dossiers www et www/js pour créer les tag <script> contenant le nom de
    // fichier .js et les append au prefooter.html
    try {
      if (req.getRequestURI().equals("/")) {
        Files.copy(new File("inc/header.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_login.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_signup.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_congrats.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_fatalerror.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/prefooter.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/footer.html").toPath(), resp.getOutputStream());
      } else {
        super.doGet(req, resp);
      }
    } catch (ServletException ex) {
      renvoyerCodeErr(resp, ex, 500);
    }
  }

  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    resp.setContentType("text/html; charset=UTF-8");
    String action = req.getParameter("action");
    try {
      switch (action) {
        case "signin":
          // System.out.println("resp1=" + resp);
          signin(req, resp);
          // System.out.println("resp2=" + resp);
          break;
        case "signup":
          signup(req, resp);
          break;
        case "whoami":
          whoami(req, resp);
          break;
        case "logout":
          logout(req, resp);
          break;
        default:
          break;
      }
    } catch (BizException ex) {
      renvoyerCodeErr(resp, ex, 422);
    } catch (Exception ex) {
      renvoyerCodeErr(resp, ex, 500);
    }
  }

  private void renvoyerCodeErr(HttpServletResponse resp, Exception ex, int code)
      throws IOException {
    json = ex.getMessage();
    resp.setStatus(code);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    ex.printStackTrace();
    System.out.println(ex.getMessage());
  }


  private void signin(HttpServletRequest req, HttpServletResponse resp)
      throws IOException, BizException {

    // String login = req.getParameter("user");
    // String password = req.getParameter("pswd");

    json = req.getParameter("userAVerif");
    UserDto userAVerif = factory.getUserVide();
    genson.deserializeInto(json, userAVerif);

    // si l utilisateur peut se connecter
    UserDto userDb = userUCC.seConnecter(userAVerif);

    if (userDb != null) {
      /*
       * req.getSession().setAttribute("userDb", userDb); Genson g = new
       * GensonBuilder().useIndentation(true).exclude("mdp").exclude("tel").exclude("email")
       * .exclude("nbContacts").exclude("dateInscription").exclude("dateNaissance").create(); json =
       * g.serialize(userDb); Map<String, Object> claims = new HashMap<>(); // claims.put("user",
       * login); claims.put("userDb", userDb); claims.put("ip", req.getRemoteAddr());
       * 
       * String secret = appContext.getValueProp("JWTSecret");
       * 
       * String token = new JWTSigner(secret).sign(claims);
       * 
       * Cookie cookie = new Cookie("token", token); cookie.setPath("/"); cookie.setMaxAge(60 * 60 *
       * 24 * 365); resp.addCookie(cookie);
       */
      startSession(userDb, req, resp);

    } else {
      json = genson.serialize(userDb);
    }
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  private void signup(HttpServletRequest req, HttpServletResponse resp)
      throws IOException, BizException {

    // TODO gérer la session lors de l'inscription

    json = req.getParameter("newUser");
    UserDto userAVerif = factory.getUserVide();

    Genson g = new GensonBuilder().useIndentation(true).exclude("dateNaissance").create();
    g.deserializeInto(json, userAVerif);
    Map<String, Object> data = genson.deserialize(json, Map.class);
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    String date = data.get("dateNaissance").toString();
    userAVerif.setDateNaissance(LocalDate.parse(date, formatter));
    System.out.println(userAVerif.getDateNaissance());

    UserDto userDb = userUCC.sinscrire(userAVerif);
    if (userDb != null) {
      startSession(userDb, req, resp);
      whoami(req, resp);
    }
  }

  private void whoami(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    // TODO stocker id au lieu du pseudo
    // TODO retourner les droits de l'utilisateur (/!\ actuellement renvoie un userDto /!\)

    UserDto whoami = getCurrentUser(req);
    if (whoami != null) {
      Genson g = new GensonBuilder().useIndentation(true).exclude("mdp", UserImpl.class)
          .exclude("dateNaissance", UserImpl.class).exclude("tel", UserImpl.class)
          .exclude("email", UserImpl.class).exclude("dateInscription", UserImpl.class)
          .exclude("nbContacts", UserImpl.class).create();
      json = g.serialize(whoami);
    } else {
      json = genson.serialize(whoami);
    }

    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));

  }

  private void startSession(UserDto user, HttpServletRequest req, HttpServletResponse resp) {
    req.getSession().setAttribute("userDb", user);
    Genson g =
        new GensonBuilder().useIndentation(true).exclude("mdp").exclude("tel").exclude("email")
            .exclude("nbContacts").exclude("dateInscription").exclude("dateNaissance").create();
    json = g.serialize(user);
    Map<String, Object> claims = new HashMap<>();
    // claims.put("user", login);
    claims.put("userDb", user);
    claims.put("ip", req.getRemoteAddr());

    String secret = appContext.getValueProp("JWTSecret");

    String token = new JWTSigner(secret).sign(claims);

    Cookie cookie = new Cookie("token", token);
    cookie.setPath("/");
    cookie.setMaxAge(60 * 60 * 24 * 365);
    resp.addCookie(cookie);
  }

  private UserDto getCurrentUser(HttpServletRequest req) {

    UserDto whoami = (UserDto) req.getSession().getAttribute("userDb");
    if (whoami != null)
      return whoami;
    String token = null;

    Cookie[] cookies = req.getCookies();
    if (cookies != null) {
      for (Cookie cookie : cookies) {
        if ("token".equals(cookie.getName()) && cookie.getSecure()) {
          token = cookie.getValue();
        } else if ("token".equals(cookie.getName()) && token == null) {
          token = cookie.getValue();
        }
      }
    }
    if (token == null) {
      return null;
    }

    try {
      Map<String, Object> decodedPayload =
          new JWTVerifier(appContext.getValueProp("JWTSecret")).verify(token);
      if (!req.getRemoteAddr().equals(decodedPayload.get("ip"))) {
        return null;
      }
      // whoami = (String) decodedPayload.get("user");
      whoami = (UserDto) decodedPayload.get("userDb");
      if (whoami != null) {
        req.getSession().setAttribute("userDb", whoami);
      }
    } catch (Exception ex) {
      System.out.println("pas de token");
      // ex.printStackTrace();
    }
    System.out.println(whoami.toString());
    return whoami;
  }

  private void logout(HttpServletRequest req, HttpServletResponse resp) {
    req.getSession().invalidate();
    Cookie cookie = new Cookie("token", "");
    cookie.setPath("/");
    /*
     * javadoc : A negative value means that the cookie is not stored persistently and will be
     * deleted when the Web browser exits. A zero value causes the cookie to be deleted.
     */
    cookie.setMaxAge(0);
    resp.addCookie(cookie);
  }


}
