package util;

import org.mindrot.jbcrypt.BCrypt;
import exceptions.BizException;
import exceptions.FatalException;

public class Util {

  /**
   * Vérifie si l'objet n'est pas nul.
   * 
   * @param ob Objet à vérifier
   */
  public void checkObject(Object ob) {
    if (ob == null) {
      throw new FatalException("Erreur causé par un parametre null");
    }
  }

  /**
   * Vérifie si la chaîne est non vide et non nul.
   * 
   * @param st Chaîne à vérifier
   * @throws BizException
   */
  public void checkString(String st) throws BizException {
    checkObject(st);
    if (st.matches("\\s*")) {
      throw new BizException("La champ ne peut pas être vide");
    }
  }

  /**
   * Vérifie si la chaîne est convertible en nombre.
   * 
   * @param st Chaîne à vérifier
   * @throws BizException
   */
  public void checkNumerique(String st) throws BizException {
    checkString(st);
    try {
      Long.parseLong(st);
    } catch (NumberFormatException ex) {
      throw new BizException("La chaîne doit être un argument valide");
    }
  }

  /**
   * Vérifie si le nombre est positif ou égal à zéro.
   * 
   * @param nombre Nombre à vérifier
   * @throws BizException
   */
  public void checkPositiveOrZero(double nombre) throws BizException {
    if (nombre < 0) {
      throw new BizException("La valeur ne peut pas être négative");
    }
  }

  /**
   * Vérifie si le nombre est strictement positif.
   * 
   * @param nombre Nombre à vérifier
   * @throws BizException
   */
  public void checkPositive(double nombre) throws BizException {
    if (nombre <= 0) {
      throw new BizException("La valeur ne peut pas être négative ou nulle");
    }
  }

  /**
   * Crypte la chaîne passée en paramètre avec le sel définit.
   * 
   * @param mdp Chaîne à crypter
   * @return La chaîne cryptée
   * @throws BizException
   */
  public String hashpw(String mdp) throws BizException {
    return BCrypt.hashpw(mdp, BCrypt.gensalt());
  }

  /**
   * Vérifie si les deux chaînes sont les mêmes.
   * 
   * @param mdp Chaîne non cryptée à comparer
   * @param mdpHashed Chaîne cryptée à comparer
   * @return True si les chaînes sont identiques, false sinon
   * @throws BizException
   */
  public boolean checkpw(String mdp, String mdpHashed) {
    return BCrypt.checkpw(mdp, mdpHashed);
  }
}
