package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;
import biz.entreprise.EntrepriseDto;
import biz.factory.BizFactory;
import dal.services.DalBackendServices;
import exceptions.FatalException;
import exceptions.OptimisticLockException;
import util.AppContext.DependanceInjection;
import util.DaoUtil;

public class EntrepriseDaoImpl implements EntrepriseDao {

  @DependanceInjection
  private DalBackendServices dalBackendService;

  @DependanceInjection
  private BizFactory factory;

  @DependanceInjection
  private DaoUtil daoUtil;

  private static final String QUERY_GET_ALL_ENTREPRISES = "SELECT * FROM stagify.entreprises";

  private static final String QUERY_GET_ALL_ENTREPRISES_WITH_NUMBER_OF_STUDENTS =
      "SELECT e.id_entreprise, e.denomination, e.adresse, e.numero, e.boite,"
          + " e.code_postal, e.ville, e.email, e.tel, e.est_black_liste, e.num_version, "
          + "COUNT(s.utilisateur) as \"Etudiants en stage\" FROM stagify.entreprises e "
          + "LEFT OUTER JOIN stagify.stages s ON e.id_entreprise = s.entreprise "
          + "AND s.annee_academique = ? "
          + "GROUP BY e.id_entreprise, e.denomination, e.adresse, e.numero, e.boite,"
          + " e.code_postal, e.ville, e.email, e.tel, e.est_black_liste, e.num_version";

  private static final String QUERY_GET_ENTREPRISE =
      "SELECT * FROM stagify.entreprises WHERE id_entreprise=?";

  private static final String QUERY_BLACKLISTER_ENTREPRISE =
      "UPDATE stagify.entreprises SET est_black_liste = true, num_version = num_version+1 "
          + "WHERE id_entreprise = ? AND num_version = ?";

  private static final String QUERY_INSERT_ENTREPRISE =
      "INSERT INTO stagify.entreprises(denomination,adresse,numero,"
          + "boite,code_postal,ville,email,tel,est_black_liste,num_version) "
          + "VALUES (?,?,?,?,?,?,?,?,?,?)";

  private static final String QUERY_DENOMINATION_ENTREPRISE_EXISTE =
      "SELECT count(*) FROM stagify.entreprises WHERE denomination=?";

  private static final String QUERY_GET_ANNEES_ACADEMIQUES =
      "SELECT DISTINCT u.annee_academique FROM stagify.utilisateurs u "
          + "WHERE u.est_admin = false ORDER BY u.annee_academique DESC";

  @Override
  public List<EntrepriseDto> getAllEntreprises() {
    PreparedStatement ps = dalBackendService.getPreparedStatement(QUERY_GET_ALL_ENTREPRISES);
    List<EntrepriseDto> entreprises;

    try (ResultSet rs = ps.executeQuery()) {
      EntrepriseDto entreprise = factory.getEntrepriseVide();
      entreprises = (List<EntrepriseDto>) (Object) daoUtil.setResultSet(entreprise.getClass(), rs);

    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException(
          "Erreur lors de la récupération des entreprises dans la base de données.");
    }
    return entreprises;
  }

  @Override
  public List<HashMap<String, Object>> getAllEntreprisesWithNumberOfStudents(
      String anneeAcademique) {
    PreparedStatement ps;
    HashMap<String, Object> map;
    List<HashMap<String, Object>> entreprises = new ArrayList<>();

    ps = dalBackendService.getPreparedStatement(QUERY_GET_ALL_ENTREPRISES_WITH_NUMBER_OF_STUDENTS);
    daoUtil.setPreparedStatement(ps, anneeAcademique);
    try (ResultSet resultSet = ps.executeQuery()) {
      while (resultSet.next()) {
        map = getKeyValueEntrepriseDto(resultSet);
        entreprises.add(map);
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException(
          "Erreur lors de la récupération des entreprises dans la base de données.");
    }
    return entreprises;
  }

  // TODO verifier si rs.getMetaData() renvoie les noms de colonnes précisées dans le SELECT
  private HashMap<String, Object> getKeyValueEntrepriseDto(ResultSet rs) throws SQLException {
    HashMap<String, Object> map = new HashMap<String, Object>();
    map.put("idEntreprise", rs.getInt(1));
    map.put("denomination", rs.getString(2));
    map.put("adresse", rs.getString(3));
    map.put("numero", rs.getString(4));
    map.put("boite", rs.getString(5));
    map.put("codePostal", rs.getString(6));
    map.put("ville", rs.getString(7));
    map.put("email", rs.getString(8));
    map.put("tel", rs.getString(9));
    map.put("estBlackListe", rs.getBoolean(10));
    map.put("numVersion", rs.getInt(11));
    map.put("nEtudiants", rs.getInt(12));
    return map;
  }

  @Override
  public EntrepriseDto getEntreprise(int idEntreprise) {
    PreparedStatement ps;
    EntrepriseDto entrepriseDto;
    List<EntrepriseDto> entrepriseDtos;

    try {
      ps = dalBackendService.getPreparedStatement(QUERY_GET_ENTREPRISE);
      daoUtil.setPreparedStatement(ps, idEntreprise);
      try (ResultSet resultSet = ps.executeQuery()) {
        entrepriseDto = (EntrepriseDto) factory.getEntrepriseVide();
        entrepriseDtos = (List<EntrepriseDto>) (Object) daoUtil
            .setResultSet(entrepriseDto.getClass(), resultSet);
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException(
          "Erreur lors de la récupération de l'entreprise dans la base de données.");
    }
    if (entrepriseDtos == null || entrepriseDtos.size() > 1) {
      throw new FatalException("Erreur de programmation");
    }
    if (entrepriseDtos.isEmpty()) {
      return null;
    }
    return entrepriseDtos.get(0);
  }

  @Override
  public EntrepriseDto blacklistEntreprise(EntrepriseDto entreprise) {
    PreparedStatement ps = dalBackendService.getPreparedStatement(QUERY_BLACKLISTER_ENTREPRISE);
    daoUtil.setPreparedStatement(ps, entreprise.getIdEntreprise(), entreprise.getNumVersion());
    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        entreprise.setNumVersion(entreprise.getNumVersion() + 1);
        return entreprise;
      } else if (codeRetour == 0) {
        throw new OptimisticLockException(
            "L'entreprise a été modifiée depuis le chargement de cette page",
            getEntreprise(entreprise.getIdEntreprise()));
      } else {
        throw new FatalException("Erreur de programmation");
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur lors de l'accès DB blacklistEntreprise()");
    }
  }

  @Override
  public EntrepriseDto insertEntreprise(EntrepriseDto entreprise) {
    PreparedStatement ps = dalBackendService.getPreparedStatementForInsert(QUERY_INSERT_ENTREPRISE);
    daoUtil.setPreparedStatement(ps, entreprise.getDenomination(), entreprise.getAdresse(),
        entreprise.getNumero(), entreprise.getBoite(), entreprise.getCodePostal(),
        entreprise.getVille(), entreprise.getEmail(), entreprise.getTel(),
        entreprise.getEstBlackListe(), entreprise.getNumVersion());
    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
          if (generatedKeys.next()) {
            System.out.println(generatedKeys);
            entreprise.setIdEntreprise((generatedKeys.getInt(1)));
          }
        }
        return entreprise;
      } else {
        throw new FatalException("Erreur de programmation");
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
  }

  @Override
  public boolean denominationEntrepriseExiste(String denomination) {
    PreparedStatement ps =
        dalBackendService.getPreparedStatement(QUERY_DENOMINATION_ENTREPRISE_EXISTE);
    daoUtil.setPreparedStatement(ps, denomination);
    try (ResultSet rs = ps.executeQuery()) {
      if (rs.next()) {
        int count = rs.getInt(1);
        if (count > 1) {
          throw new FatalException("duplicate PK table entreprises");
        }
        return count == 1;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur lors de l'accès à la DB");

    }
  }

  @Override
  public List<String> getAnneesAcademiques() {
    PreparedStatement ps = dalBackendService.getPreparedStatement(QUERY_GET_ANNEES_ACADEMIQUES);
    List<String> anneesAcademiques = new ArrayList<String>();

    try (ResultSet rs = ps.executeQuery()) {
      while (rs.next()) {
        anneesAcademiques.add(rs.getString(1));
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException(
          "Erreur lors de la récupération des années académique dans la base de données.");
    }
    return anneesAcademiques;
  }
}
