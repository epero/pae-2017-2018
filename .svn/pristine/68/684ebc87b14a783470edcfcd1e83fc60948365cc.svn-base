package biz.user;

import static org.junit.Assert.assertEquals;
import java.time.LocalDate;
import org.junit.Before;
import org.junit.Test;
import org.mindrot.jbcrypt.BCrypt;

public class UserImplTest {

  private UserBiz jean;
  private String mdp = BCrypt.hashpw("1234", BCrypt.gensalt());

  @Before
  public void setUp() throws Exception {
    jean = new UserImpl();
    jean.setPseudo("jean92");
    jean.setMdp(mdp);
    jean.setNom("neymar");
    jean.setPrenom("jean");
    jean.setDateNaissance(LocalDate.now());
    jean.setTel("0478776655");
    jean.setEmail("jean@gmail.com");
    jean.setDateInscription(LocalDate.now());
    jean.setNbContacts(5);
    jean.setAnneeAcademique("2017-2018");
    jean.setEstAdmin(true);

  }

  @Test(expected = IllegalArgumentException.class)
  public void testVerifierMotDePasse1() {
    jean.verifierMotDePasse(null);
  }

  @Test
  public void testVerifierMotDePasse2() {
    assertEquals(false, jean.verifierMotDePasse("12345"));
    assertEquals(false, jean.verifierMotDePasse("123"));
    assertEquals(false, jean.verifierMotDePasse("toto"));
  }

  @Test
  public void testVerifierMotDePasse3() {
    assertEquals(true, jean.verifierMotDePasse("1234"));
  }

  @Test
  public void testGetPseudo() {
    assertEquals("jean92", jean.getPseudo());
  }

  @Test(expected = IllegalArgumentException.class)
  public void testSetPseudo1() {
    try {
      jean.setPseudo(null);
    } catch (IllegalArgumentException e) {
      jean.setPseudo("");
    }
  }

  @Test
  public void testSetPseudo2() {
    jean.setPseudo("toto");
    assertEquals("toto", jean.getPseudo());
  }

  @Test
  public void testGetMdp() {
    assertEquals(mdp, jean.getMdp());
  }

  @Test(expected = IllegalArgumentException.class)
  public void testSetMdp1() {
    try {
      jean.setMdp(null);
    } catch (IllegalArgumentException e) {
      jean.setMdp("");
    }
  }

  @Test
  public void testSetMdp2() {
    jean.setMdp("9999");
    assertEquals("9999", jean.getMdp());
  }

  /*
   * @Test public void testGetDateNaissance() { assertEquals(new
   * GregorianCalendar(1992,7,7).getTime(), jean.getDateNaissance()); }
   * 
   * @Test public void testSetDateNaissance() { fail("Not yet implemented"); }
   * 
   * @Test public void testGetTel() { assertEquals("0478776655", jean.getTel()); }
   * 
   * @Test (expected=IllegalArgumentException.class) public void testSetTel1() { try{
   * jean.setTel(null); }catch (IllegalArgumentException e){ jean.setTel(""); } }
   * 
   * @Test public void testSetTel2() { jean.setTel("0479008811");
   * assertEquals("0479008811",jean.getTel()); }
   * 
   * @Test public void testGetEmail() { assertEquals("jean@gmail.com", jean.getEmail()); }
   * 
   * @Test (expected=IllegalArgumentException.class) public void testSetEmail1() { try{
   * jean.setEmail(null); }catch (IllegalArgumentException e){ jean.setEmail(""); } }
   * 
   * @Test public void testSetEmail2() { jean.setEmail("jean.neymar@live.be");
   * assertEquals("jean.neymar@live.be", jean.getEmail()); }
   * 
   * @Test public void testGetDateInscription() { assertEquals(new
   * GregorianCalendar(2017,9,2).getTime(), jean.getDateInscription()); }
   * 
   * @Test public void testSetDateInscription() { fail("Not yet implemented"); }
   * 
   * @Test public void testGetAnneeAcademique() { assertEquals("2017-2018",
   * jean.getAnneeAcademique()); }
   */
  /******/
  /*
   * @Test (expected=IllegalArgumentException.class) public void testSetAnneeAcademique1() { try{
   * jean.setAnneeAcademique(null); }catch (IllegalArgumentException e) {
   * jean.setAnneeAcademique(""); } }
   * 
   * @Test public void testSetAnneeAcademique2() { jean.setAnneeAcademique("2016-2017");
   * assertEquals("2016-2017", jean.getAnneeAcademique()); }
   */
  /*
   * @Test public void testGetNbContacts() { assertEquals(5, jean.getNbContacts()); }
   * 
   * @Test (expected=IllegalArgumentException.class) public void testSetNbContacts1() {
   * jean.setNbContacts(-2); }
   * 
   * @Test public void testSetNbContacts2() { jean.setNbContacts(3); assertEquals(3,
   * jean.getNbContacts()); }
   * 
   * @Test public void testGetNom() { assertEquals("neymar", jean.getNom()); }
   * 
   * @Test public void testSetNom() { fail("Not yet implemented"); }
   * 
   * @Test public void testGetPrenom() { assertEquals("jean", jean.getPrenom()); }
   * 
   * @Test public void testSetPrenom() { fail("Not yet implemented"); }
   * 
   * @Test public void testEstAdmin() { assertEquals(true, jean.estAdmin()); }
   * 
   * @Test public void testSetEstAdmin() { fail("Not yet implemented"); }
   */

}
