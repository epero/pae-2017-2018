package dal.dao;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import dal.services.DalBackendServices;
import exceptions.FatalException;
import exceptions.OptimisticLockException;
import util.AppContext;
import util.AppContext.DependanceInjection;
import util.DaoUtil;

public abstract class DaoGeneriqueImpl<E> implements DaoGenerique<E> {

  @DependanceInjection
  protected DalBackendServices dalBackendServices;

  @DependanceInjection
  protected DaoUtil daoUtil;

  @DependanceInjection
  AppContext appContext;

  private final String NULL_INDICATOR = "_NULL_";

  private Class<E> classe;

  private void initDaoGenerique() {
    if (classe == null) {
      classe = (Class<E>) appContext.getClassValueProp(
          ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0]
              .getTypeName());
    }
  }


  public E insert(E e) {
    initDaoGenerique();
    String nomClasse = e.getClass().getSimpleName();
    if (nomClasse.equals("UserImpl")) {
      nomClasse = "UtilisateurImpl";
    }
    Map<String, Object> atts = getAttributeNamesAndValues(e);
    Deque<Object> values = new ArrayDeque<Object>();
    String nomTable = null;
    if (nomClasse.equals("PersonneContactImpl")) {
      nomTable = "personnes_contact";
    } else {
      nomTable = nomClasse.substring(0, nomClasse.length() - 4).toLowerCase() + "s";
    }
    String query = "INSERT INTO stagify." + nomTable + "(";
    for (String attName : atts.keySet()) {
      if (!attName.equals("id_" + nomClasse.substring(0, nomClasse.length() - 4)
          .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase()) && !attName.contains("dto")) {
        System.out.println(attName);
        query += attName + ", ";
        if (atts.get(attName) == null)
          values.addLast(NULL_INDICATOR);
        else
          values.addLast(atts.get(attName));
      }
    }
    query = query.substring(0, query.length() - 2);
    query += ") VALUES(";
    for (int i = 0; i < values.size(); i++) {
      query += "?, ";
    }
    query = query.substring(0, query.length() - 2);
    query += ")";
    System.out.println(query);
    // check si faut pas mettre ca dans try catch
    PreparedStatement ps = dalBackendServices.getPreparedStatementForInsert(query);
    int nbrValues = values.size();
    for (int i = 1; i <= nbrValues; i++) {
      try {
        Object att = values.pollFirst();
        if (att.getClass() == LocalDate.class) {
          Timestamp date = Timestamp.valueOf(((LocalDate) att).atStartOfDay());
          ps.setObject(i, date);
        } else if (att.equals(NULL_INDICATOR)) {
          ps.setObject(i, null);
        } else {
          ps.setObject(i, att);
        }
      } catch (SQLException ex) {
        // TODO Auto-generated catch block
        ex.printStackTrace();
      }
    }


    try

    {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
          if (generatedKeys.next()) {
            Method method = null;
            try {
              method = e.getClass().getDeclaredMethod(
                  "setId" + nomClasse.substring(0, nomClasse.length() - 4), int.class);
              method.setAccessible(true);
            } catch (NoSuchMethodException e1) {
              // TODO Auto-generated catch block
              e1.printStackTrace();
            } catch (SecurityException e1) {
              // TODO Auto-generated catch block
              e1.printStackTrace();
            }
            try {
              method.invoke(e, generatedKeys.getInt(1));
            } catch (IllegalAccessException ex) {
              // TODO Auto-generated catch block
              ex.printStackTrace();
            } catch (IllegalArgumentException ex) {
              // TODO Auto-generated catch block
              ex.printStackTrace();
            } catch (InvocationTargetException ex) {
              // TODO Auto-generated catch block
              ex.printStackTrace();
            }
          }
        }
        return e;
      } else {
        throw new FatalException("Erreur de programmation");
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      ex.printStackTrace();
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
  }


  public E update(E e) {
    initDaoGenerique();
    String nomClasse = e.getClass().getSimpleName();
    if (nomClasse.equals("UserImpl")) {
      nomClasse = "UtilisateurImpl";
    }
    Map<String, Object> atts = getAttributeNamesAndValues(e);
    Deque<Object> values = new ArrayDeque<Object>();
    String nomTable = null;
    if (nomClasse.equals("PersonneContactImpl")) {
      nomTable = "personnes_contact";
    } else {
      nomTable = nomClasse.substring(0, nomClasse.length() - 4).toLowerCase() + "s";
    }
    String query = "UPDATE stagify." + nomTable + " SET ";
    for (String attName : atts.keySet()) {
      if ((!attName.equals("id_" + nomClasse.substring(0, nomClasse.length() - 4)
          .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase()) && !attName.contains("dto"))
          && !attName.equals("num_version")) {
        query += attName + " = ? , ";
        if (atts.get(attName) == null)
          values.addLast(NULL_INDICATOR);
        else
          values.addLast(atts.get(attName));
      }
    }
    query +=
        "num_version = num_version+1 WHERE id_" + nomClasse.substring(0, nomClasse.length() - 4)
            .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase() + "= ? AND num_version = ?";

    PreparedStatement ps = dalBackendServices.getPreparedStatement(query);
    int nbrValues = values.size();
    for (int i = 1; i <= nbrValues; i++) {
      try {
        Object att = values.pollFirst();
        if (att.getClass() == LocalDate.class) {
          Timestamp date = Timestamp.valueOf(((LocalDate) att).atStartOfDay());
          ps.setObject(i, date);
        } else if (att.equals(NULL_INDICATOR)) {
          ps.setObject(i, null);
        } else {
          ps.setObject(i, att);
        }
      } catch (SQLException ex) {
        // TODO Auto-generated catch block
        ex.printStackTrace();
      }
    }

    try {
      ps.setObject(nbrValues + 1,
          atts.get("id_" + nomClasse.substring(0, nomClasse.length() - 4).toLowerCase()));
      ps.setObject(nbrValues + 2, atts.get("num_version"));
    } catch (SQLException e2) {
      // TODO Auto-generated catch block
      e2.printStackTrace();
    }
    System.out.println(query);
    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        Method methSetNumVersion = null;
        try {
          methSetNumVersion = e.getClass().getDeclaredMethod("setNumVersion", int.class);
          methSetNumVersion.setAccessible(true);
        } catch (NoSuchMethodException e1) {
          // TODO Auto-generated catch block
          e1.printStackTrace();
        } catch (SecurityException e1) {
          // TODO Auto-generated catch block
          e1.printStackTrace();
        }
        try {
          methSetNumVersion.invoke(e, Integer.parseInt(atts.get("num_version") + "") + 1);
        } catch (IllegalAccessException ex) {
          // TODO Auto-generated catch block
          ex.printStackTrace();
        } catch (IllegalArgumentException ex) {
          // TODO Auto-generated catch block
          ex.printStackTrace();
        } catch (InvocationTargetException ex) {
          // TODO Auto-generated catch block
          ex.printStackTrace();
        }
        return e;
      } else if (codeRetour == 0) {
        throw new OptimisticLockException(
            "L'utilisateur a été modifié depuis le chargement de cette page",
            // probleme?
            get(Integer.parseInt(""
                + atts.get("id_" + nomClasse.substring(0, nomClasse.length() - 4).toLowerCase()))));
      } else {
        throw new FatalException("Erreur de programmation");
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      ex.printStackTrace();
      throw new FatalException("Erreur lors de l'accès DB update()");
    }
  }


  public void delete(Object object) {
    initDaoGenerique();
  }


  public E get(int id) {
    initDaoGenerique();
    String nomClasse = classe.getSimpleName();
    if (nomClasse.equals("UserImpl")) {
      nomClasse = "UtilisateurImpl";
    }
    String nomTable = null;
    if (nomClasse.equals("PersonneContactImpl")) {
      nomTable = "personnes_contact";
    } else {
      nomTable = nomClasse.substring(0, nomClasse.length() - 4).toLowerCase() + "s";
    }
    String query = "SELECT * FROM stagify." + nomTable + " WHERE id_" + nomClasse
        .substring(0, nomClasse.length() - 4).replaceAll("(.)([A-Z])", "$1_$2").toLowerCase()
        + " = ?";

    System.out.println(query);
    List<Object> objects = null;
    try {
      PreparedStatement ps = dalBackendServices.getPreparedStatement(query);
      ps.setInt(1, id);
      try (ResultSet resultSet = ps.executeQuery()) {
        objects = (List<Object>) daoUtil.setResultSet(classe, resultSet);
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      ex.printStackTrace();
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
    if (objects == null || objects.size() > 1) {
      throw new FatalException("Erreur de programmation");
    }
    if (objects.isEmpty()) {
      return null;
    }
    return (E) objects.get(0);
  }

  public List<Object> getAll() {
    return null;
  }

  private Map<String, Object> getAttributeNamesAndValues(Object object) {
    Map<String, Object> atts = new HashMap<String, Object>();
    for (Field field : object.getClass().getDeclaredFields()) {
      try {
        field.setAccessible(true);
        atts.put(field.getName().replaceAll("(.)([A-Z])", "$1_$2").toLowerCase(),
            field.get(object));
      } catch (IllegalArgumentException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      } catch (IllegalAccessException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
    return atts;
  }

}
