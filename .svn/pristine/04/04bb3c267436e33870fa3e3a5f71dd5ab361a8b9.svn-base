package dal.dao;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import biz.factory.BizFactory;
import biz.user.UserDto;
import dal.services.DalServices;
import exceptions.FatalException;
import util.AppContext.DependanceInjection;
import util.Util;


class UserDaoImpl implements UserDao {

  @DependanceInjection
  private DalServices dalService;

  @DependanceInjection
  private BizFactory factory;

  @DependanceInjection
  private Util util;


  @Override
  public UserDto getUser(String pseudo) {
    util.checkString(pseudo);
    final String query = "SELECT * FROM stagify.utilisateurs WHERE pseudo = ?";
    PreparedStatement preparedStatement;
    UserDto user;

    try {
      preparedStatement = dalService.getPreparedStatement(query);
      if (preparedStatement == null) {
        return null;
      }
      setPreparedStatement(preparedStatement, pseudo);
      try (ResultSet resultSet = preparedStatement.executeQuery()) {
        user = (UserDto) factory.getUser();
        if (setUserResultSet(user, resultSet)) {
          return user;
        } else {
          return null;
        }
        /*
         * if (resultSet.next()) { user.setPseudo(pseudo); user.setMdp(resultSet.getString("mdp"));
         * user.setNom(resultSet.getString("nom")); user.setPrenom(resultSet.getString("prenom"));
         * user.setDateNaissance(
         * resultSet.getTimestamp("date_naissance").toLocalDateTime().toLocalDate());
         * user.setTel(resultSet.getString("tel")); user.setEmail(resultSet.getString("email"));
         * user.setDateInscription(
         * resultSet.getTimestamp("date_inscription").toLocalDateTime().toLocalDate());
         * user.setAnneeAcademique(resultSet.getString("annee_academique"));
         * user.setEstAdmin(resultSet.getBoolean("est_admin"));
         * user.setNbContacts(resultSet.getInt("nb_contacts")); return user; }
         */
      } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
        throw new FatalException(
            "Erreur lors de la récupération de l'utilisateur dans la base de données.");
      }
    } catch (SQLException ex) {
      ex.printStackTrace();
      throw new FatalException(
          "Erreur lors de la récupération de l'utilisateur dans la base de données.");
    }
    // return null;
  }

  private void setPreparedStatement(PreparedStatement ps, Object... objects) {
    try {
      for (int i = 1; i <= objects.length; i++) {
        ps.setObject(i, objects[i - 1]);
      }
    } catch (SQLException ex) {
      throw new FatalException();
    }
  }

  private boolean setUserResultSet(UserDto user, ResultSet rs) throws IllegalAccessException,
      IllegalArgumentException, InvocationTargetException, SQLException {
    ResultSetMetaData rsmd = rs.getMetaData();
    // TODO comprendre pourquoi if(!rs.next()) ne renvoie pas false lorsque l'user n'est pas présent
    // dans la DB
    if (rs.next()) {
      do {
        for (int i = 1; i <= rsmd.getColumnCount(); i++) {
          String nomColonne = rsmd.getColumnName(i).replace("_", "").toLowerCase();
          Class userClass = user.getClass();
          for (Method method : userClass.getDeclaredMethods()) {
            if (method.getName().startsWith("set")
                && nomColonne.matches(method.getName().toLowerCase().substring(3))) {
              if (rs.getObject(i).getClass().getName().equals("java.sql.Timestamp")) {
                Timestamp t = (Timestamp) rs.getObject(i);
                method.invoke(user, t.toLocalDateTime().toLocalDate());
              } else {
                method.invoke(user, rs.getObject(i));
              }
            }
          }
        }
      } while (rs.next());
      return true;
    } else {
      return false;
    }
  }

  @Override
  public UserDto insertUser(UserDto user) {
    // TODO Auto-generated method stub
    return null;
  }

}
