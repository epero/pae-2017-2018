package biz.ucc;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;
import biz.contact.ContactDto;
import biz.entreprise.EntrepriseBiz;
import biz.entreprise.EntrepriseDto;
import biz.pdc.PersonneContactDto;
import biz.stage.StageDto;
import biz.user.UserBiz;
import dal.dao.ContactDao;
import dal.dao.EntrepriseDao;
import dal.dao.PersonneContactDao;
import dal.dao.StageDao;
import dal.services.DalServices;
import exceptions.BizException;
import exceptions.FatalException;
import util.AppContext.DependanceInjection;
import util.Util;

public class EntrepriseUccImpl implements EntrepriseUcc {

  @DependanceInjection
  private EntrepriseDao entrepriseDao;

  @DependanceInjection
  private ContactDao contactDao;

  @DependanceInjection
  private StageDao stageDao;

  @DependanceInjection
  private PersonneContactDao personneContactDao;

  @DependanceInjection
  private DalServices dalServices;

  @Override
  public List<EntrepriseDto> visualiserEntreprises() {
    List<EntrepriseDto> entrepriseDtos;

    try {
      dalServices.startTransaction();
      entrepriseDtos = entrepriseDao.getAllEntreprises();
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return entrepriseDtos;
  }

  @Override
  public List<HashMap<String, Object>> visualiserEntreprisesAsProf(String anneeAcademique) {
    Util.checkFormatString(anneeAcademique, UserBiz.MAX_CARACTERES_ANNEE_ACADEMIQUE,
        UserBiz.REGEX_ANNEE_ACADEMIQUE, "Le format de l'année académique est incorrect");

    List<HashMap<String, Object>> entrepriseDtos;

    try {
      dalServices.startTransaction();
      entrepriseDtos = entrepriseDao.getAllEntreprisesWithNumberOfStudents(anneeAcademique);
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return entrepriseDtos;
  }

  @Override
  public EntrepriseDto getEntreprise(int idEntreprise) {

    EntrepriseDto entrepriseDto;

    try {
      dalServices.startTransaction();
      entrepriseDto = entrepriseDao.getEntreprise(idEntreprise);
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return entrepriseDto;
  }

  @Override
  public EntrepriseDto blacklistEntreprise(int idEntreprise, int entNumVersion) {

    EntrepriseDto entrepriseARet;

    try {
      dalServices.startTransaction();
      EntrepriseDto entrepriseDb = entrepriseDao.getEntreprise(idEntreprise);
      if (entrepriseDb == null) {
        throw new BizException("L'entreprise n'existe pas");
      }
      entrepriseDb.setNumVersion(entNumVersion);
      entrepriseARet = entrepriseDao.blacklistEntreprise(entrepriseDb);
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return entrepriseARet;
  }

  @Override
  public EntrepriseDto insertEntreprise(EntrepriseDto entreprise) {
    EntrepriseDto entrepriseARet = null;
    try {
      dalServices.startTransaction();
      Util.checkFormatString(entreprise.getDenomination(),
          EntrepriseBiz.MAX_CARACTERES_DENOMINATION, "Le format de la dénomination est incorrect");
      Util.checkFormatString(entreprise.getAdresse(), EntrepriseBiz.MAX_CARACTERES_ADRESSE,
          "Le format de la rue est incorrect");
      Util.checkFormatString(entreprise.getCodePostal(), EntrepriseBiz.MAX_CARACTERES_CODE_POSTAL,
          "Le format du code postal est incorrect");
      Util.checkFormatString(entreprise.getVille(), EntrepriseBiz.MAX_CARACTERES_VILLE,
          "Le format de la ville est incorrect");
      // Le champ tel peut être vide
      if (entreprise.getTel() != null && !entreprise.getTel().equals("")) {
        Util.checkFormatString(entreprise.getTel(), EntrepriseBiz.MAX_CARACTERES_TEL,
            EntrepriseBiz.REGEX_TEL, "Le format du numero de téléphone est incorrect");
      }
      // Le champ email peut être vide
      if (entreprise.getEmail() != null && !entreprise.getEmail().equals("")) {
        Util.checkFormatString(entreprise.getEmail(), EntrepriseBiz.MAX_CARACTERES_EMAIL,
            EntrepriseBiz.REGEX_EMAIL, "Le format de l'email est incorrect");
      }
      if (entrepriseDao.denominationEntrepriseExiste(entreprise.getDenomination())) {
        throw new BizException("La dénomination de l'entreprise existe déjà !");
      }
      entreprise.setEstBlackListe(false);
      entreprise.setEstSupprime(false);
      entreprise.setNumVersion(0);
      entrepriseARet = entrepriseDao.insertEntreprise(entreprise);
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return entrepriseARet;
  }

  @Override
  public List<String> getAnneesAcademiques() {
    List<String> anneesAcademiques;

    try {
      dalServices.startTransaction();
      anneesAcademiques = entrepriseDao.getAnneesAcademiques();
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    if (anneesAcademiques.isEmpty()) {
      anneesAcademiques.add(Util.localDateToYear(LocalDate.now()));
    }
    return anneesAcademiques;
  }

  @Override
  public EntrepriseDto fusionnerEntreprise1AvecEntreprise2(int idEntreprise1, int idEntreprise2) {
    EntrepriseDto entreprise1 = null;
    EntrepriseDto entreprise2 = null;
    try {
      dalServices.startTransaction();
      // get entreprise 1 et 2
      entreprise1 = entrepriseDao.getEntreprise(idEntreprise1);
      entreprise2 = entrepriseDao.getEntreprise(idEntreprise2);
      if (entreprise1 == null || entreprise2 == null) {
        // bizException!!!
        throw new FatalException("Erreur de programmation: id entreprise inexistant");
      }
      if (entreprise1.getEstSupprime()){
    	  throw new BizException("L'entreprise 1 est déjà supprimée");
      }
      if (entreprise2.getEstSupprime()){
    	  throw new BizException("L'entreprise 2 est déjà supprimée");
      }

      // ************************** TRANSFERT stages,pdc et contacts*********************
      List<StageDto> stagesEntreprise1 = stageDao.listerStagesPourEntreprise(idEntreprise1);
      for (StageDto stageDto : stagesEntreprise1) {
        stageDao.updateEntrepriseStage(stageDto.getIdStage(), stageDto.getNumVersion(),
            idEntreprise2);
      }
      List<PersonneContactDto> pdcEntreprise1 =
          personneContactDao.listerPersonnesContactByIdEntreprise(idEntreprise1);
      for (PersonneContactDto pdc : pdcEntreprise1) {
        personneContactDao.updateEntreprisePersonneContact(pdc.getIdPersonneContact(),
            pdc.getNumVersion(), idEntreprise2);
      }
      List<ContactDto> contactsEntreprise1 = contactDao.listerContactsPourEntreprise(idEntreprise1);
      for (ContactDto contactDto : contactsEntreprise1) {
        contactDao.updateEntrepriseContact(contactDto.getIdContact(), contactDto.getNumVersion(),
            idEntreprise2);
      }
      // *********************************************************************************
      entrepriseDao.supprimerEntreprise(idEntreprise1, entreprise1.getNumVersion());
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }

    return entreprise2;
  }

  @Override
  public List<EntrepriseDto> getAllEntreprisesSauf(int idEntreprise) {
    List<EntrepriseDto> listeEntreprises = new ArrayList<>();
    try {
      dalServices.startTransaction();
      listeEntreprises = entrepriseDao.getAllEntreprisesSauf(idEntreprise);
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return listeEntreprises;
  }


}
