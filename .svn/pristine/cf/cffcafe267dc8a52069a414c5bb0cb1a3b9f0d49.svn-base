package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import biz.entreprise.EntrepriseDto;
import biz.factory.BizFactory;
import biz.pdc.PersonneContactDto;
import biz.stage.StageDto;
import dal.services.DalBackendServices;
import exceptions.FatalException;
import exceptions.OptimisticLockException;
import util.AppContext.DependanceInjection;
import util.DaoUtil;

public class StageDaoImpl implements StageDao {

  @DependanceInjection
  private DalBackendServices dalBackendServices;

  @DependanceInjection
  private BizFactory factory;

  @DependanceInjection
  private DaoUtil daoUtil;

  @DependanceInjection
  private UserDao userDao;

  @DependanceInjection
  private EntrepriseDao entrepriseDao;

  @DependanceInjection
  private PersonneContactDao personneContactDao;

  @DependanceInjection
  DaoGenerique daoGenerique;

  /*
   * private static final String QUERY_INSERT_STAGE =
   * "INSERT INTO stagify.stages(annee_academique, date_signature, adresse, numero," +
   * " boite, code_postal, ville, responsable, entreprise, utilisateur, num_version)" +
   * "VALUES (?,?,?,?,?,?,?,?,?,?,?)";
   */

  private static final String QUERY_GET_STAGE =
      "SELECT s.id_stage, s.utilisateur, s.annee_academique, s.date_signature,"
          + " s.adresse, s.numero, s.boite, s.code_postal, s.ville, s.num_version,"
          + " pc.id_personne_contact AS \"pc id\", pc.nom AS \"pc nom\","
          + " pc.prenom AS \"pc prenom\", pc.tel AS \"pc tel\", pc.email AS \"pc email\","
          + " pc.num_version AS \"pc num_version\","
          + " e.id_entreprise AS \"e id\", e.denomination AS \"e denomination\", "
          + "e.adresse AS \"e adresse\", e.numero AS \"e numero\", e.boite AS \"e boite\", "
          + "e.code_postal AS \"e code_postal\", e.ville AS \"e ville\","
          + " e.email AS \"e email\", e.tel AS \"e tel\", "
          + "e.est_black_liste AS \"e est_black_liste\","
          + "e.num_version AS \"e num_version\", e.est_supprime AS \"e est_supprime\""
          + " FROM stagify.stages s, stagify.personnes_contact pc, " + "stagify.entreprises e"
          + " WHERE s.utilisateur = ?" + " AND s.responsable = pc.id_personne_contact"
          + " AND s.entreprise = e.id_entreprise";

  private static final String QUERY_LISTER_STAGES_ENTREPRISE =
      "SELECT id_stage, annee_academique, date_signature,adresse, numero, boite, code_postal, ville,responsable,entreprise,utilisateur,num_version FROM stagify.stages WHERE entreprise=?";

  private static final String QUERY_UPDATE_ENTREPRISE_STAGE =
      "UPDATE stagify.stages SET entreprise=?,num_version=num_version+1 WHERE id_stage=? AND num_version=?";

  @Override
  public StageDto insertStage(StageDto stage) {
    StageDto stageDto = (StageDto) daoGenerique.insert(stage);
    System.out.println(stageDto);
    return stageDto;
    /*
     * Logger.getLogger("stagifyLogger").finest(stage.toString()); PreparedStatement ps =
     * dalBackendServices.getPreparedStatementForInsert(QUERY_INSERT_STAGE); Timestamp dateSignature
     * = Timestamp.valueOf(stage.getDateSignature().atStartOfDay());
     * 
     * 
     * daoUtil.setPreparedStatement(ps, stage.getAnneeAcademique(), dateSignature,
     * stage.getAdresse(), stage.getNumero(), stage.getBoite(), stage.getCodePostal(),
     * stage.getVille(), stage.getResponsable(), stage.getEntreprise(), stage.getUtilisateur(),
     * stage.getNumVersion());
     * 
     * try { int codeRetour = ps.executeUpdate(); if (codeRetour == 1) { try (ResultSet
     * generatedKeys = ps.getGeneratedKeys()) { if (generatedKeys.next()) {
     * stage.setIdStage(generatedKeys.getInt(1)); } } return stage; } else { throw new
     * FatalException("Erreur de programmaton"); }
     * 
     * } catch (SQLException ex) { Logger.getLogger("stagifyLogger").fine(ex.getMessage()); throw
     * new FatalException("Erreur lors de l'accès à la DB"); }
     */
  }

  @Override
  public StageDto getStage(int idUtilisateur) {
    PreparedStatement ps = dalBackendServices.getPreparedStatement(QUERY_GET_STAGE);
    daoUtil.setPreparedStatement(ps, idUtilisateur);

    try (ResultSet rs = ps.executeQuery()) {
      if (rs.next()) {
        return remplirStage(rs);
      } else {
        return null;
      }

    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      ex.printStackTrace();
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
  }

  private StageDto remplirStage(ResultSet rs) throws SQLException {
    StageDto stage = factory.getStageVide();
    stage.fillStage(rs.getInt("id_stage"), rs.getString("annee_academique"),
        ((Timestamp) rs.getTimestamp("date_signature")).toLocalDateTime().toLocalDate(),
        rs.getString("adresse"), rs.getString("numero"), rs.getString("boite"),
        rs.getString("code_postal"), rs.getString("ville"), rs.getInt("pc id"), null,
        rs.getInt("e id"), null, rs.getInt("utilisateur"), null, rs.getInt("num_version"));
    PersonneContactDto responsableDto = factory.getPersonneContactVide();
    responsableDto.fillPersonneContact(rs.getInt("pc id"), rs.getString("pc nom"),
        rs.getString("pc prenom"), rs.getString("pc tel"), rs.getString("pc email"),
        rs.getInt("e id"), null, rs.getInt("pc num_version"));
    stage.setResponsableDto(responsableDto);
    EntrepriseDto entrepriseDto = factory.getEntrepriseVide();
    entrepriseDto.fillEntreprise(rs.getInt("e id"), rs.getString("e denomination"),
        rs.getString("e adresse"), rs.getString("e numero"), rs.getString("e boite"),
        rs.getString("e code_postal"), rs.getString("e ville"), rs.getString("e email"),
        rs.getString("e tel"), rs.getBoolean("e est_black_liste"), rs.getInt("e num_version"),
        rs.getBoolean("e est_supprime"));
    stage.setResponsableDto(responsableDto);
    stage.setEntrepriseDto(entrepriseDto);
    return stage;
  }

  @Override
  public List<StageDto> listerStagesPourEntreprise(int idEntreprise) {
    List<StageDto> listeStages = new ArrayList<>();
    PreparedStatement ps = dalBackendServices.getPreparedStatement(QUERY_LISTER_STAGES_ENTREPRISE);
    daoUtil.setPreparedStatement(ps, idEntreprise);
    try (ResultSet rs = ps.executeQuery()) {
      while (rs.next()) {
        StageDto stage = factory.getStageVide();
        stage.fillStage(rs.getInt(1), rs.getString(2),
            ((Timestamp) rs.getTimestamp(3)).toLocalDateTime().toLocalDate(), rs.getString(4),
            rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getInt(9), null,
            rs.getInt(10), null, rs.getInt(11), null, rs.getInt(12));
        listeStages.add(stage);
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur accès DB");
    }
    return listeStages;
  }

  @Override
  public boolean updateEntrepriseStage(int idStage, int numVersion, int idEntreprise) {
    // TODO Auto-generated method stub
    PreparedStatement ps = dalBackendServices.getPreparedStatement(QUERY_UPDATE_ENTREPRISE_STAGE);
    daoUtil.setPreparedStatement(ps, idEntreprise, idStage, numVersion);
    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        return true;
      } else if (codeRetour == 0) {
        throw new OptimisticLockException("Le stage a été modifié entre temps", getStage(idStage));
      } else {
        throw new FatalException("Erreur de programmation");
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur acces Db");
    }
  }


}
