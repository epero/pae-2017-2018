package biz.ucc;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import biz.contact.ContactDto;
import biz.entreprise.EntrepriseBiz;
import biz.entreprise.EntrepriseDto;
import biz.pdc.PersonneContactDto;
import biz.stage.StageDto;
import biz.uow.UnitOfWork;
import biz.user.UserBiz;
import dal.dao.ContactDao;
import dal.dao.EntrepriseDao;
import dal.dao.PersonneContactDao;
import dal.dao.StageDao;
import exceptions.BizException;
import exceptions.FatalException;
import util.AppContext.DependanceInjection;
import util.Util;

public class EntrepriseUccImpl implements EntrepriseUcc {

  @DependanceInjection
  private EntrepriseDao entrepriseDao;

  @DependanceInjection
  private ContactDao contactDao;

  @DependanceInjection
  private StageDao stageDao;

  @DependanceInjection
  private PersonneContactDao personneContactDao;

  @DependanceInjection
  private UnitOfWork unitOfWork;

  @Override
  public List<EntrepriseDto> visualiserEntreprises() {
    unitOfWork.startTransBiz();
    // TODO remplacer par methode generique
    List<EntrepriseDto> entrepriseDtos = entrepriseDao.getAllEntreprises();
    unitOfWork.commitTransBiz();
    return entrepriseDtos;
  }

  @Override
  public List<HashMap<String, Object>> visualiserEntreprisesAsProf(String anneeAcademique) {
    Util.checkFormatString(anneeAcademique, UserBiz.MAX_CARACTERES_ANNEE_ACADEMIQUE,
        UserBiz.REGEX_ANNEE_ACADEMIQUE, "Le format de l'année académique est incorrect");

    unitOfWork.startTransBiz();
    List<HashMap<String, Object>> entrepriseDtos =
        entrepriseDao.getAllEntreprisesWithNumberOfStudents(anneeAcademique);
    unitOfWork.commitTransBiz();
    return entrepriseDtos;
  }

  @Override
  public EntrepriseDto getEntreprise(int idEntreprise) {

    unitOfWork.startTransBiz();
    EntrepriseDto entrepriseDto = entrepriseDao.getEntreprise(idEntreprise);
    unitOfWork.commitTransBiz();

    return entrepriseDto;
  }

  @Override
  public EntrepriseDto blacklistEntreprise(int idEntreprise, int entNumVersion) {

    unitOfWork.startTransBiz();
    EntrepriseDto entrepriseDb = entrepriseDao.getEntreprise(idEntreprise);
    if (entrepriseDb == null) {
      throw new BizException("L'entreprise n'existe pas");
    }
    entrepriseDb.setNumVersion(entNumVersion);
    entrepriseDb.setEstBlackListe(true);
    unitOfWork.update(entrepriseDb, entrepriseDb.getIdEntreprise());
    unitOfWork.commitTransBiz();
    return entrepriseDb;
  }

  @Override
  public EntrepriseDto insertEntreprise(EntrepriseDto entreprise) {

    Util.checkFormatString(entreprise.getDenomination(), EntrepriseBiz.MAX_CARACTERES_DENOMINATION,
        "Le format de la dénomination est incorrect");
    Util.checkFormatString(entreprise.getAdresse(), EntrepriseBiz.MAX_CARACTERES_ADRESSE,
        "Le format de la rue est incorrect");
    Util.checkFormatString(entreprise.getCodePostal(), EntrepriseBiz.MAX_CARACTERES_CODE_POSTAL,
        "Le format du code postal est incorrect");
    Util.checkFormatString(entreprise.getVille(), EntrepriseBiz.MAX_CARACTERES_VILLE,
        "Le format de la ville est incorrect");
    // Le champ tel peut être vide
    if (entreprise.getTel() != null && !entreprise.getTel().equals("")) {
      Util.checkFormatString(entreprise.getTel(), EntrepriseBiz.MAX_CARACTERES_TEL,
          EntrepriseBiz.REGEX_TEL, "Le format du numero de téléphone est incorrect");
    }
    // Le champ email peut être vide
    if (entreprise.getEmail() != null && !entreprise.getEmail().equals("")) {
      Util.checkFormatString(entreprise.getEmail(), EntrepriseBiz.MAX_CARACTERES_EMAIL,
          EntrepriseBiz.REGEX_EMAIL, "Le format de l'email est incorrect");
    }

    unitOfWork.startTransBiz();
    if (entrepriseDao.denominationEntrepriseExiste(entreprise.getDenomination())) {
      throw new BizException("La dénomination de l'entreprise existe déjà !");
    }
    entreprise.setEstBlackListe(false);
    entreprise.setEstSupprime(false);
    entreprise.setNumVersion(0);
    // TODO a modifier cid
    unitOfWork.insert(entreprise, entreprise.getIdEntreprise());
    unitOfWork.commitTransBiz();
    return entreprise;
  }

  @Override
  public List<String> getAnneesAcademiques() {

    unitOfWork.startTransBiz();
    List<String> anneesAcademiques = entrepriseDao.getAnneesAcademiques();
    unitOfWork.commitTransBiz();
    if (anneesAcademiques.isEmpty()) {
      anneesAcademiques.add(Util.localDateToYear(LocalDate.now()));
    }
    return anneesAcademiques;
  }

  // TODO METHODE DOIT PRENDRE LES NUMS VERSIONS DES 2 ENTREPRISES AUSSI
  @Override
  public EntrepriseDto fusionnerEntreprise1AvecEntreprise2(int idEntreprise1, int idEntreprise2) {

    unitOfWork.startTransBiz();
    // get entreprise 1 et 2
    EntrepriseDto entreprise1 = entrepriseDao.getEntreprise(idEntreprise1);
    EntrepriseDto entreprise2 = entrepriseDao.getEntreprise(idEntreprise2);
    if (entreprise1 == null || entreprise2 == null) {
      // TODO bizException!!!
      throw new FatalException("Erreur de programmation: id entreprise inexistant");
    }
    if (entreprise1.getEstSupprime()) {
      throw new BizException("L'entreprise 1 est déjà supprimée");
    }
    if (entreprise2.getEstSupprime()) {
      throw new BizException("L'entreprise 2 est déjà supprimée");
    }

    // ************************** TRANSFERT stages,pdc et contacts*********************
    List<StageDto> stagesEntreprise1 = stageDao.listerStagesPourEntreprise(idEntreprise1);
    for (StageDto stageDto : stagesEntreprise1) {
      stageDto.setEntreprise(idEntreprise2);
      unitOfWork.update(stageDto, stageDto.getIdStage());
      // stageDao.updateEntrepriseStage(stageDto.getIdStage(), stageDto.getNumVersion(),
      // idEntreprise2);
    }
    List<PersonneContactDto> pdcEntreprise1 =
        personneContactDao.listerPersonnesContactByIdEntreprise(idEntreprise1);
    for (PersonneContactDto pdc : pdcEntreprise1) {
      pdc.setEntreprise(idEntreprise2);
      unitOfWork.update(pdc, pdc.getIdPersonneContact());
      // personneContactDao.updateEntreprisePersonneContact(pdc.getIdPersonneContact(),
      // pdc.getNumVersion(), idEntreprise2);
    }
    List<ContactDto> contactsEntreprise1 = contactDao.listerContactsPourEntreprise(idEntreprise1);
    for (ContactDto contactDto : contactsEntreprise1) {
      contactDto.setEntreprise(idEntreprise2);
      unitOfWork.update(contactDto, contactDto.getIdContact());
      // contactDao.updateEntrepriseContact(contactDto.getIdContact(), contactDto.getNumVersion(),
      // idEntreprise2);
    }
    // *********************************************************************************
    // entrepriseDao.supprimerEntreprise(idEntreprise1, entreprise1.getNumVersion());
    entreprise1.setEstSupprime(true);
    unitOfWork.update(entreprise1, entreprise1.getIdEntreprise());
    unitOfWork.commitTransBiz();
    return entreprise2;
  }

  // TODO A ENLEVER
  @Override
  public List<EntrepriseDto> getAllEntreprisesSauf(int idEntreprise) {
    unitOfWork.startTransBiz();
    List<EntrepriseDto> listeEntreprises = entrepriseDao.getAllEntreprisesSauf(idEntreprise);
    unitOfWork.commitTransBiz();
    return listeEntreprises;
  }


}
