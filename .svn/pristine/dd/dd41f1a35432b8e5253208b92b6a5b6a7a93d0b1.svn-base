package dal.dao;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Logger;
import dal.services.DalBackendServices;
import exceptions.FatalException;
import exceptions.OptimisticLockException;
import util.AppContext;
import util.AppContext.DependanceInjection;
import util.DaoUtil;

public abstract class DaoGeneriqueImpl<E> implements DaoGenerique<E> {

  @DependanceInjection
  protected DalBackendServices dalBackendServices;

  @DependanceInjection
  protected DaoUtil daoUtil;

  @DependanceInjection
  AppContext appContext;

  private final String NULL_INDICATOR = "_NULL_";
  private final String TRAD_USER_DTO = "UtilisateurImpl";
  private final String TRAD_PDC_DTO = "personnes_contact";

  private Class<E> classe;
  private String nomClasse;
  private String nomTableDb;

  private void initDaoGenerique() {
    if (classe == null) {
      classe = (Class<E>) appContext.getClassValueProp(
          ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0]
              .getTypeName());
    }
    nomClasse = classe.getSimpleName();
    if (classe == appContext.getClassValueProp("biz.user.UserDto")) {
      nomClasse = TRAD_USER_DTO;
    }
    if (classe == appContext.getClassValueProp("biz.pdc.PersonneContactDto")) {
      nomTableDb = TRAD_PDC_DTO;
    } else {
      nomTableDb = nomClasse.substring(0, nomClasse.length() - 4).toLowerCase() + "s";
    }
  }


  public E insert(E e) {
    initDaoGenerique();
    Map<String, Object> atts = getAttributeNamesAndValues(e);
    Deque<Object> values = new ArrayDeque<Object>();

    StringBuffer buf = new StringBuffer("INSERT INTO stagify." + nomTableDb + "(");
    // String query = "INSERT INTO stagify." + nomTableDb + "(";
    for (Entry<String, Object> entry : atts.entrySet()) {
      if (!entry.getKey()
          .equals("id_" + nomClasse.substring(0, nomClasse.length() - 4)
              .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase())
          && !entry.getKey().contains("dto")) {
        // query += attName + ", ";
        buf.append(entry.getKey() + ", ");
        if (entry.getValue() == null)
          values.addLast(NULL_INDICATOR);
        else
          values.addLast(entry.getValue());
      }
    }
    // query = query.substring(0, query.length() - 2);
    // String query = buf.substring(0, buf.length() - 2);
    // buf = new StringBuffer(query);
    buf.setLength(buf.length() - 2);
    // query += ") VALUES(";
    buf.append(") VALUES(");
    for (int i = 0; i < values.size(); i++) {
      // query += "?, ";
      buf.append("?, ");
    }
    // query = buf.substring(0, buf.length() - 2);
    // query += ")";
    buf.setLength(buf.length() - 2);
    buf.append(")");
    String query = buf.toString();
    System.out.println(query);

    PreparedStatement ps = dalBackendServices.getPreparedStatementForInsert(query);
    setPreparedStatementObjects(ps, values);

    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
          if (generatedKeys.next()) {
            Method method = null;
            method = e.getClass().getDeclaredMethod(
                "setId" + nomClasse.substring(0, nomClasse.length() - 4), int.class);
            method.setAccessible(true);
            method.invoke(e, generatedKeys.getInt(1));
          }
        } catch (NoSuchMethodException | SecurityException | IllegalAccessException
            | IllegalArgumentException | InvocationTargetException e1) {
          e1.printStackTrace();
          throw new FatalException("Erreur de programmation");
        }
        return e;
      } else {
        throw new FatalException("Erreur de programmation");
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      ex.printStackTrace();
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
  }


  public E update(E e) {
    initDaoGenerique();

    Map<String, Object> atts = getAttributeNamesAndValues(e);
    Deque<Object> values = new ArrayDeque<Object>();

    // String query = "UPDATE stagify." + nomTableDb + " SET ";
    StringBuffer buf = new StringBuffer("UPDATE stagify." + nomTableDb + " SET ");
    for (Entry<String, Object> entry : atts.entrySet()) {
      if ((!entry.getKey()
          .equals("id_" + nomClasse.substring(0, nomClasse.length() - 4)
              .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase())
          && !entry.getKey().contains("dto")) && !entry.getValue().equals("num_version")) {
        // query += attName + " = ? , ";
        buf.append(entry.getKey() + " = ? , ");
        if (entry.getValue() == null)
          values.addLast(NULL_INDICATOR);
        else
          values.addLast(entry.getValue());
      }
    }
    // query +=
    // "num_version = num_version+1 WHERE id_" + nomClasse.substring(0, nomClasse.length() - 4)
    // .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase() + "= ? AND num_version = ?";
    buf.append(
        "num_version = num_version+1 WHERE id_" + nomClasse.substring(0, nomClasse.length() - 4)
            .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase() + "= ? AND num_version = ?");
    PreparedStatement ps = dalBackendServices.getPreparedStatement(buf.toString());
    int nbrValues = values.size();
    setPreparedStatementObjects(ps, values);

    try {
      ps.setObject(nbrValues + 1, atts.get("id_" + nomClasse.substring(0, nomClasse.length() - 4)
          .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase()));
      ps.setObject(nbrValues + 2, atts.get("num_version"));
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      ex.printStackTrace();
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
    System.out.println(buf.toString());

    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        Method methSetNumVersion = null;

        try {
          methSetNumVersion = e.getClass().getDeclaredMethod("setNumVersion", int.class);
          methSetNumVersion.setAccessible(true);
          methSetNumVersion.invoke(e, Integer.parseInt(atts.get("num_version") + "") + 1);
        } catch (NoSuchMethodException | SecurityException | IllegalAccessException
            | IllegalArgumentException | InvocationTargetException e1) {
          e1.printStackTrace();
          throw new FatalException("Erreur de programmation");
        }
        return e;
      } else if (codeRetour == 0) {
        throw new OptimisticLockException(
            "L'utilisateur a été modifié depuis le chargement de cette page",
            get(Integer
                .parseInt("" + atts.get("id_" + nomClasse.substring(0, nomClasse.length() - 4)
                    .replaceAll("(.)([A-Z])", "$1_$2").toLowerCase()))));
      } else {
        throw new FatalException("Erreur de programmation");
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      ex.printStackTrace();
      throw new FatalException("Erreur lors de l'accès DB update()");
    }
  }


  public void delete(Object object) {
    initDaoGenerique();
  }


  public E get(int id) {
    initDaoGenerique();

    String query = "SELECT * FROM stagify." + nomTableDb + " WHERE id_" + nomClasse
        .substring(0, nomClasse.length() - 4).replaceAll("(.)([A-Z])", "$1_$2").toLowerCase()
        + " = ?";

    System.out.println(query);
    List<E> objects = null;
    try {
      PreparedStatement ps = dalBackendServices.getPreparedStatement(query);
      ps.setInt(1, id);
      try (ResultSet resultSet = ps.executeQuery()) {
        objects = daoUtil.setResultSet(classe, resultSet);
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      ex.printStackTrace();
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
    if (objects == null || objects.size() > 1) {
      throw new FatalException("Erreur de programmation");
    }
    if (objects.isEmpty()) {
      return null;
    }
    return objects.get(0);
  }

  public List<Object> getAll() {
    return null;
  }

  private void setPreparedStatementObjects(PreparedStatement ps, Deque<Object> objects) {
    int nbrValues = objects.size();
    for (int i = 1; i <= nbrValues; i++) {
      try {
        Object att = objects.pollFirst();
        if (att.getClass() == LocalDate.class) {
          Timestamp date = Timestamp.valueOf(((LocalDate) att).atStartOfDay());
          ps.setObject(i, date);
        } else if (att.equals(NULL_INDICATOR)) {
          ps.setObject(i, null);
        } else {
          ps.setObject(i, att);
        }
      } catch (SQLException ex) {
        Logger.getLogger("stagifyLogger").fine(ex.getMessage());
        ex.printStackTrace();
        throw new FatalException("Erreur lors de l'accès DB update()");
      }
    }
  }

  private Map<String, Object> getAttributeNamesAndValues(Object object) {
    Map<String, Object> atts = new HashMap<String, Object>();
    for (Field field : classe.getDeclaredFields()) {
      field.setAccessible(true);
      try {
        atts.put(field.getName().replaceAll("(.)([A-Z])", "$1_$2").toLowerCase(),
            field.get(object));
      } catch (IllegalArgumentException | IllegalAccessException ex) {
        ex.printStackTrace();
        throw new FatalException("Erreur de programmation");
      }

    }
    return atts;
  }

}
