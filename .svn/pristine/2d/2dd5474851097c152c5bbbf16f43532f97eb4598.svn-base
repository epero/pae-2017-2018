package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Logger;
import biz.contact.ContactDto;
import exceptions.FatalException;
import util.AppContext.DependanceInjection;

public class ContactDaoImpl extends DaoGeneriqueImpl<ContactDto> implements ContactDao {

  @DependanceInjection
  private EntrepriseDao entrepriseDao;

  @DependanceInjection
  private UserDao userDao;

  @DependanceInjection
  private PersonneContactDao personneContactDao;


  /*
   * private final String QUERY_GET_CONTACT = "SELECT C.id_contact,C.utilisateur," +
   * "C.entreprise,C.personne_contact,C.etat,C.annee_academique," +
   * "E.id_entreprise, E.denomination,E.adresse,E.numero,E.boite," +
   * "E.code_postal,E.ville,E.email,E.tel,E.est_black_liste," +
   * "PC.id_personne_contact,PC.nom,PC.prenom,PC.tel,PC.email," +
   * "PC.entreprise,C.num_version, E.num_version, PC.num_version, E.est_supprime " +
   * "FROM stagify.entreprises E,stagify.contacts C " +
   * "LEFT OUTER JOIN stagify.personnes_contact PC " +
   * "ON PC.id_personne_contact=C.personne_contact " +
   * "WHERE C.entreprise=E.id_entreprise AND C.id_contact=?";
   */

  /*
   * private final String QUERY_GET_CONTACTS = "SELECT C.id_contact,C.utilisateur," +
   * "C.entreprise,C.personne_contact,C.etat,C.annee_academique," +
   * "E.id_entreprise, E.denomination,E.adresse,E.numero," +
   * "E.boite,E.code_postal,E.ville,E.email,E.tel,E.est_black_liste," +
   * "PC.id_personne_contact,PC.nom,PC.prenom," +
   * "PC.tel,PC.email,PC.entreprise,C.num_version, E.num_version, PC.num_version, E.est_supprime " +
   * "FROM stagify.entreprises E,stagify.contacts C " +
   * "LEFT OUTER JOIN stagify.personnes_contact PC " +
   * "ON PC.id_personne_contact=C.personne_contact " +
   * "WHERE C.utilisateur=? AND C.entreprise=E.id_entreprise AND C.etat=?";
   */

  /*
   * private final String QUERY_GET_CONTACTS_ENTREPRISE = "SELECT C.id_contact,C.utilisateur," +
   * "C.entreprise,C.personne_contact,C.etat,C.annee_academique, C.num_version " +
   * "FROM stagify.contacts C WHERE C.entreprise=?";
   */

  /*
   * private final String QUERY_LISTER_CONTACT_UTILISATEUR =
   * "SELECT C.id_contact,C.utilisateur,C.entreprise," +
   * "C.personne_contact,C.etat,C.annee_academique," +
   * "E.id_entreprise, E.denomination,E.adresse,E.numero,E.boite," +
   * "E.code_postal,E.ville,E.email,E.tel,E.est_black_liste," +
   * "PC.id_personne_contact,PC.nom,PC.prenom,PC.tel,PC.email," +
   * "PC.entreprise,C.num_version, E.num_version, PC.num_version,E.est_supprime  " +
   * "FROM stagify.entreprises E,stagify.contacts C " +
   * "LEFT OUTER JOIN stagify.personnes_contact PC " +
   * "ON PC.id_personne_contact=C.personne_contact " +
   * "WHERE C.utilisateur=? AND C.entreprise=E.id_entreprise";
   */

  /*
   * private final String QUERY_INSERT_CONTACT_UTILISATEUR = "INSERT INTO stagify.contacts" +
   * "(utilisateur, entreprise, personne_contact, etat, annee_academique, num_version)" +
   * "VALUES(?, ?, ?, ?, ?, ?)";
   */

  // private final String QUERY_LISTER_CONTACT_DIFFERENT_DE_ETAT =
  // "SELECT * FROM stagify.contacts WHERE utilisateur=? AND etat!=?";

  // private final String QUERY_EXISTE_CONTACT_FOR_ENTREPRISE_ET_USER =
  // "SELECT entreprise FROM stagify.contacts WHERE utilisateur = ? AND entreprise = ?";

  /*
   * private final String QUERY_UPDATE_ETAT_CONTACT =
   * "UPDATE stagify.contacts SET etat=?, num_version=num_version+1 " +
   * "WHERE id_contact=? AND num_version=?";
   */

  /*
   * private final String QUERY_EXISTE_CONTACT_AVEC_ETAT =
   * "SELECT count(*) FROM stagify.contacts WHERE utilisateur=? AND etat=?";
   */

  // private final String QUERY_EXISTE_CONTACT_ACCEPTE_OU_EN_ORDRE =
  // "SELECT * FROM stagify.contacts WHERE utilisateur = ? AND (etat = 4 OR etat = 3)";

  // private final String QUERY_UPDATE_ENTREPRISE_CONTACT =
  // "UPDATE stagify.contacts SET entreprise=?, num_version=num_version+1 WHERE id_contact=? AND
  // num_version=?";

  @Override
  public ContactDto getContact(int idContact) {
    ContactDto contact = super.get(idContact);
    contact.setEntrepriseDto(entrepriseDao.getEntreprise(contact.getEntreprise()));
    if (contact.getPersonneContact() != null) {
      contact.setPersonneContactDto(
          personneContactDao.getPersonneContact(contact.getPersonneContact()));
    }
    return contact;
  }

  /*
   * private ContactDto remplirContact(ResultSet rs) throws SQLException { EntrepriseDto entreprise
   * = factory.getEntrepriseVide(); entreprise.fillEntreprise(rs.getInt(7), rs.getString(8),
   * rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13),
   * rs.getString(14), rs.getString(15), rs.getBoolean(16), rs.getInt(24), rs.getBoolean(26));
   * PersonneContactDto personneContact = null; Object idPersonneContact = rs.getObject(17);
   * System.out.println(idPersonneContact); if (idPersonneContact != null) { personneContact =
   * factory.getPersonneContactVide(); personneContact.fillPersonneContact((int) idPersonneContact,
   * rs.getString(18), rs.getString(19), rs.getString(20), rs.getString(21), rs.getInt(22), null,
   * rs.getInt(25)); }
   * 
   * ContactDto contact = factory.getContactVide(); contact.fillContact(rs.getInt(1), rs.getInt(2),
   * null, rs.getInt(3), entreprise, (Integer) rs.getObject(4), personneContact, rs.getInt(5),
   * rs.getString(6), rs.getInt(23)); return contact; }
   */

  @Override
  public List<ContactDto> getContacts(int idUser, int etat) {
    List<ContactDto> listeContacts;

    PreparedStatement ps =
        dalBackendServices.getPreparedStatement(appContext.getValueProp("query_get_contacts"));
    daoUtil.setPreparedStatement(ps, idUser, etat);
    try (ResultSet rs = ps.executeQuery()) {
      listeContacts = (List<ContactDto>) (Object) daoUtil
          .setResultSet(appContext.getClassValueProp("biz.contact.ContactDto"), rs);
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur accès DB");
    }

    return listeContacts;

  }

  @Override
  public List<ContactDto> listerContactsPourEntreprise(int idEntreprise) {
    List<ContactDto> listeContacts;

    PreparedStatement ps = dalBackendServices
        .getPreparedStatement(appContext.getValueProp("query_get_contacts_entreprise"));
    daoUtil.setPreparedStatement(ps, idEntreprise);
    try (ResultSet rs = ps.executeQuery()) {
      listeContacts = (List<ContactDto>) (Object) daoUtil
          .setResultSet(appContext.getClassValueProp("biz.contact.ContactDto"), rs);
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur accès DB");
    }

    return listeContacts;
  }

  @Override
  public List<ContactDto> listerContactsPourUtilisateur(int idUtilisateur) {
    List<ContactDto> listeContacts;

    PreparedStatement ps = dalBackendServices
        .getPreparedStatement(appContext.getValueProp("query_lister_contact_utilisateur"));
    daoUtil.setPreparedStatement(ps, idUtilisateur);
    try (ResultSet rs = ps.executeQuery()) {
      listeContacts = (List<ContactDto>) (Object) daoUtil
          .setResultSet(appContext.getClassValueProp("biz.contact.ContactDto"), rs);
    } catch (SQLException ex) {
      ex.printStackTrace();
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur accès DB");
    }
    for (ContactDto contactDto : listeContacts) {
      contactDto.setEntrepriseDto(entrepriseDao.getEntreprise(contactDto.getEntreprise()));
      if (contactDto.getPersonneContact() != null) {
        contactDto.setPersonneContactDto(
            personneContactDao.getPersonneContact(contactDto.getPersonneContact()));
      }
    }
    return listeContacts;
  }



  @Override
  public ContactDto insertContact(ContactDto contact) {
    return super.insert(contact);
  }

  /*
   * @Override public ContactDto insertContactUtilisateurSansPersonneContact(ContactDto contact) {
   * PreparedStatement ps = dalBackendServices
   * .getPreparedStatement(appContext.getValueProp("query_insert_contact_utilisateur"));
   * daoUtil.setPreparedStatement(ps, contact.getUtilisateur(), contact.getEntreprise(), null,
   * contact.getEtat(), contact.getAnneeAcademique(), contact.getNumVersion());
   * 
   * try { int codeRetour = ps.executeUpdate(); if (codeRetour == 1) { try (ResultSet generatedKeys
   * = ps.getGeneratedKeys()) { if (generatedKeys.next()) {
   * contact.setIdContact((generatedKeys.getInt(1))); } } return contact; } else { throw new
   * FatalException("Erreur de programmation"); } } catch (SQLException ex) {
   * Logger.getLogger("stagifyLogger").fine(ex.getMessage()); throw new
   * FatalException("Erreur lors de l'accès à la DB"); } }
   */

  /*
   * private ContactDto executeResultSet(ContactDto contact, PreparedStatement ps) { try { int
   * codeRetour = ps.executeUpdate(); if (codeRetour == 1) { try (ResultSet generatedKeys =
   * ps.getGeneratedKeys()) { if (generatedKeys.next()) {
   * contact.setIdContact((generatedKeys.getInt(1))); } } return contact; } else { throw new
   * FatalException("Erreur de programmation"); } } catch (SQLException ex) {
   * Logger.getLogger("stagifyLogger").fine(ex.getMessage()); throw new
   * FatalException("Erreur lors de l'accès à la DB"); } }
   */

  @Override
  public List<ContactDto> listerContactDiffDeEtat(int idUtilisateur, int etat) {
    List<ContactDto> listeContacts;

    PreparedStatement ps = dalBackendServices
        .getPreparedStatement(appContext.getValueProp("query_lister_contact_different_de_etat"));
    daoUtil.setPreparedStatement(ps, idUtilisateur, etat);
    try (ResultSet rs = ps.executeQuery()) {
      listeContacts = (List<ContactDto>) daoUtil
          .setResultSet(appContext.getClassValueProp("biz.user.UserDto"), rs);
    } catch (SQLException ex) {
      ex.printStackTrace();
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur accès DB");
    }

    return listeContacts;
  }

  @Override
  public boolean existeContactForEntrepriseEtUser(int idUtilisateur, int idEntreprise) {
    PreparedStatement ps = dalBackendServices.getPreparedStatement(
        appContext.getValueProp("query_existe_contact_for_entreprise_et_user"));
    daoUtil.setPreparedStatement(ps, idUtilisateur, idEntreprise);

    try (ResultSet resultSet = ps.executeQuery()) {
      if (resultSet.next()) {
        return true;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur acces Db");
    }
  }


  /*
   * @Override public ContactDto updateEtatContact(ContactDto contactDto) {
   * 
   * PreparedStatement ps = dalBackendServices
   * .getPreparedStatement(appContext.getValueProp("query_update_etat_contact"));
   * daoUtil.setPreparedStatement(ps, contactDto.getEtat(), contactDto.getIdContact(),
   * contactDto.getNumVersion()); try { int codeRetour = ps.executeUpdate(); if (codeRetour == 1) {
   * contactDto.setNumVersion(contactDto.getNumVersion() + 1); return contactDto; } else if
   * (codeRetour == 0) { throw new OptimisticLockException("Le contact a été modifié entre temps",
   * getContact(contactDto.getIdContact())); } else { throw new
   * FatalException("Erreur de programmation"); } } catch (SQLException ex) {
   * Logger.getLogger("stagifyLogger").fine(ex.getMessage()); throw new
   * FatalException("Erreur acces Db"); } }
   */


  public ContactDto updateContact(ContactDto contact) {
    return this.update(contact);
  }

  @Override
  public boolean existeContactAvecEtat(int idUser, int etat) {
    PreparedStatement ps = dalBackendServices
        .getPreparedStatement(appContext.getValueProp("query_existe_contact_avec_etat"));
    daoUtil.setPreparedStatement(ps, idUser, etat);
    try (ResultSet rs = ps.executeQuery()) {
      if (rs.next()) {
        int nbContacts = rs.getInt(1);
        // TODO c'est du biz => pas tester ici
        if (nbContacts > 1) {
          throw new FatalException(
              "Erreur de programmation: plusieurs contacts d'un même utilisateur ont un état "
                  + etat);
        }
        return nbContacts == 1;
      }
      return false;
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur acces Db");
    }
  }

  @Override
  public boolean existeContactsAccepteOuEnOrdre(int idUser) {
    PreparedStatement ps = dalBackendServices
        .getPreparedStatement(appContext.getValueProp("query_existe_contact_accepte_ou_en_ordre"));
    daoUtil.setPreparedStatement(ps, idUser);

    try (ResultSet resultSet = ps.executeQuery()) {
      if (resultSet.next()) {
        return true;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      throw new FatalException("Erreur acces Db");
    }

  }


  /*
   * @Override public boolean updateEntrepriseContact(int idContact, int numVersion, int
   * idEntreprise) { PreparedStatement ps = dalBackendServices
   * .getPreparedStatement(appContext.getValueProp("query_update_entreprise_contact")); // TODO
   * daoUtil.setPreparedStatement(ps, idEntreprise, idContact, numVersion); try { int codeRetour =
   * ps.executeUpdate(); if (codeRetour == 1) { return true; } else if (codeRetour == 0) { throw new
   * OptimisticLockException("Le contact a été modifié entre temps", getContact(idContact)); } else
   * { throw new FatalException("Erreur de programmation"); } } catch (SQLException ex) {
   * Logger.getLogger("stagifyLogger").fine(ex.getMessage()); throw new
   * FatalException("Erreur acces Db"); } }
   */



}
