package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import biz.entreprise.EntrepriseDto;
import biz.factory.BizFactory;
import biz.pdc.PersonneContactDto;
import biz.stage.StageDto;
import biz.user.UserDto;
import dal.services.DalBackendServices;
import exceptions.FatalException;
import util.AppContext.DependanceInjection;
import util.DaoUtil;

public class StageDaoImpl implements StageDao {

  @DependanceInjection
  private DalBackendServices dalBackendService;

  @DependanceInjection
  private BizFactory factory;

  @DependanceInjection
  private UserDao userDao;

  @DependanceInjection
  private EntrepriseDao entrepriseDao;

  @DependanceInjection
  private PersonneContactDao personneContactDao;

  @Override
  public StageDto insertStage(StageDto stage) {
    System.out.println(stage);
    String query =
        "INSERT INTO stagify.stages(annee_academique, date_signature, adresse, numero, boite, code_postal, ville, responsable, entreprise, utilisateur, num_version)"
            + "VALUES (?,?,?,?,?,?,?,?,?,?,?)";
    PreparedStatement ps = dalBackendService.getPreparedStatementForInsert(query);
    Timestamp dateSignature = Timestamp.valueOf(stage.getDateSignature().atStartOfDay());


    DaoUtil.setPreparedStatement(ps, stage.getAnneeAcademique(), dateSignature, stage.getAdresse(),
        stage.getNumero(), stage.getBoite(), stage.getCodePostal(), stage.getVille(),
        stage.getResponsableDto().getIdPersonneContact(),
        stage.getEntrepriseDto().getIdEntreprise(), stage.getUtilisateurDto().getIdUtilisateur(),
        stage.getNumVersion());

    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
          if (generatedKeys.next()) {
            stage.setIdStage(generatedKeys.getInt(1));
          }
        }
        return stage;
      } else {
        throw new FatalException("Erreur de programmaton");
      }

    } catch (SQLException ex) {
      ex.printStackTrace();
      System.out.println("Erreur lors de l'insertion d'un stage");
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
  }

  @Override
  public StageDto getStage(int idUtilisateur) {
    String query =
        "SELECT s.id_stage, s.annee_academique, s.date_signature, s.adresse, s.numero, s.boite, s.code_postal, s.ville,"
            + " pc.id_personne_contact AS \"pc id\", pc.nom AS \"pc nom\", pc.prenom AS \"pc prenom\","
            + " pc.tel AS \"pc tel\", pc.email AS \"pc email\","
            + " e.id_entreprise AS \"e id\", e.denomination AS \"e denomination\", e.adresse AS \"e adresse\","
            + " e.numero AS \"e numero\", e.boite AS \"e boite\", e.code_postal AS \"e code_postal\", e.ville AS \"e ville\","
            + " e.email AS \"e email\", e.tel AS \"e tel\", e.est_black_liste AS \"e est_black_liste\","
            + " u.pseudo AS \"u pseudo\", u.mdp AS \"u mdp\", u.nom AS \"u nom\","
            + " u.prenom AS \"u prenom\", u.date_naissance AS \"u date_naissance\", u.tel AS \"u tel\", u.email AS \"u email\","
            + " u.date_inscription  AS \"u date_inscription\", u.annee_academique AS \"u annee_academique\","
            + " u.est_admin AS \"u est_admin\", u.nb_contacts AS \"u nb_contacts\""
            + " FROM stagify.stages s, stagify.personnes_contact pc, stagify.entreprises e, stagify.utilisateurs u"
            + " WHERE utilisateur = ?" + " AND s.responsable = pc.id_personne_contact"
            + " AND s.entreprise = e.id_entreprise" + " AND s.utilisateur = u.id_utilisateur";
    PreparedStatement ps = dalBackendService.getPreparedStatement(query);
    DaoUtil.setPreparedStatement(ps, idUtilisateur);

    try (ResultSet rs = ps.executeQuery()) {
      if (rs.next()) {
        return remplirStage(idUtilisateur, rs);
      } else {
        return null;
      }

    } catch (SQLException ex) {
      System.out.println("Erreur lors de la vérification d'un stage");
      throw new FatalException("Erreur lors de l'accès à la DB");
    }
  }

  private StageDto remplirStage(int idUtilisateur, ResultSet rs) throws SQLException {
    StageDto stage = factory.getStageVide();

    stage.setIdStage(rs.getInt("id_stage"));
    stage.setAnneeAcademique(rs.getString("annee_academique"));
    stage.setDateSignature(
        ((Timestamp) rs.getTimestamp("date_signature")).toLocalDateTime().toLocalDate());
    stage.setAdresse(rs.getString("adresse"));
    stage.setNumero(rs.getInt("numero"));
    stage.setBoite(rs.getString("boite"));
    stage.setCodePostal(rs.getString("code_postal"));
    stage.setVille(rs.getString("ville"));
    int responsable = rs.getInt("pc id");
    int entreprise = rs.getInt("e id");

    stage.setResponsable(responsable);
    PersonneContactDto responsableDto = remplirPersonneContact(responsable, rs.getString("pc nom"),
        rs.getString("pc prenom"), rs.getString("pc tel"), rs.getString("pc email"), entreprise);
    stage.setResponsableDto(responsableDto);

    stage.setEntreprise(entreprise);
    EntrepriseDto entrepriseDto = remplirEntreprise(entreprise, rs.getString("e denomination"),
        rs.getString("e adresse"), rs.getInt("e numero"), rs.getString("e boite"),
        rs.getString("e code_postal"), rs.getString("e ville"), rs.getString("e email"),
        rs.getString("e tel"), rs.getBoolean("e est_black_liste"));
    stage.setEntrepriseDto(entrepriseDto);

    stage.setUtilisateur(idUtilisateur);
    UserDto utilisateurDto = remplirUtilisateur((Object) idUtilisateur, rs.getString("u pseudo"),
        rs.getString("u mdp"), rs.getString("u nom"), rs.getString("u prenom"),
        (Object) ((Timestamp) rs.getTimestamp("u date_naissance")).toLocalDateTime().toLocalDate(),
        rs.getString("u tel"), rs.getString("u email"),
        (Object) ((Timestamp) rs.getTimestamp("u date_inscription")).toLocalDateTime()
            .toLocalDate(),
        rs.getString("u annee_academique"), rs.getBoolean("u est_admin"),
        rs.getInt("u nb_contacts"));
    stage.setUtilisateurDto(utilisateurDto);

    return stage;
  }

  // TODO Trouver un endroit où mettre ceci car c'est du copier/coller de ContactDaoImpl
  // TODO Rajouter le num_version et modifier les méthodes qui en dépendent
  private EntrepriseDto remplirEntreprise(int idEntreprise, String denomination, String adresse,
      int numero, String boite, String codePostal, String ville, String email, String tel,
      boolean estBlackListe) {
    EntrepriseDto entreprise = factory.getEntrepriseVide();
    entreprise.setIdEntreprise(idEntreprise);
    entreprise.setDenomination(denomination);
    entreprise.setAdresse(adresse);
    entreprise.setNumero(numero);
    entreprise.setBoite(boite);
    entreprise.setCodePostal(codePostal);
    entreprise.setVille(ville);
    entreprise.setEmail(email);
    entreprise.setTel(tel);
    entreprise.setEstBlackListe(estBlackListe);
    return entreprise;
  }

  // TODO Trouver un endroit où mettre ceci car c'est du copier/coller de ContactDaoImpl
  // TODO Rajouter le num_version et modifier les méthodes qui en dépendent
  private PersonneContactDto remplirPersonneContact(Object idPersonneContact, String nom,
      String prenom, String tel, String email, Object entreprise) {
    PersonneContactDto personneContact = factory.getPersonneContactVide();
    // si id == null alors il n y a pas de personne de contact et on renvoi null
    if (idPersonneContact == null) {
      return null;
    }
    if (entreprise == null) {
      throw new FatalException(
          "Erreur de FK entreprise dans la table personnes de contact de la DB");
    }
    personneContact.setIdPersonneContact((int) idPersonneContact);
    personneContact.setNom(nom);
    personneContact.setPrenom(prenom);
    personneContact.setTel(tel);
    personneContact.setEmail(email);
    personneContact.setEntreprise((int) entreprise);
    return personneContact;
  }

  // TODO Rajouter le num_version et modifier les méthodes qui en dépendent
  private UserDto remplirUtilisateur(Object idUtilisateur, String pseudo, String mdp, String nom,
      String prenom, Object dateNaissance, String tel, String email, Object dateInscription,
      String anneeAcademique, boolean estAdmin, int nbContacts) {
    UserDto utilisateur = factory.getUserVide();
    // si id == null alors il n y a pas d'utilisateur et on renvoi null
    if (idUtilisateur == null) {
      return null;
    }
    utilisateur.setIdUtilisateur((int) idUtilisateur);
    utilisateur.setPseudo(pseudo);
    utilisateur.setMdp(mdp);
    utilisateur.setNom(nom);
    utilisateur.setPrenom(prenom);
    utilisateur.setDateNaissance((LocalDate) dateNaissance);
    utilisateur.setTel(tel);
    utilisateur.setEmail(email);
    utilisateur.setDateInscription((LocalDate) dateInscription);
    utilisateur.setAnneeAcademique(anneeAcademique);
    utilisateur.setEstAdmin(estAdmin);
    utilisateur.setNbContacts(nbContacts);
    return utilisateur;
  }



}
