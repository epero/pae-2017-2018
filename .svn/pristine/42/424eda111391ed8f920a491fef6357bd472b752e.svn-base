package biz.user;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.lang.reflect.Field;
import java.util.GregorianCalendar;

import org.junit.Before;
import org.junit.Test;

public class UserImplTest {

	//private UserBiz user;
	private UserBiz jean;

	@Before
	public void setUp() throws Exception {
		/*user=new UserImpl();
		user.setPseudo("toto");
		user.setMdp("toto77");
		//user.setAnneeAcademique("2017-2018");
		user.setDateInscription(new GregorianCalendar(2017,9,2).getTime());
		user.setEmail("toto@gmail.com");
		user.setNbContacts(5);
		user.setTel("0478776655");*/

		//Class<?> classe= Class.forName("biz.user.UserImpl");
		Field[] attributs=null;

		jean=UserImpl.class.newInstance();
		attributs=UserImpl.class.getDeclaredFields();
		for (Field field : attributs) {
			field.setAccessible(true);
			switch(field.getName()){
			case "pseudo":
				field.set(jean, "jean92");
				break;
			case "mdp":
				field.set(jean, "1234");
				break;
			case "nom":
				field.set(jean, "neymar");
				break;
			case "prenom":
				field.set(jean, "jean");
				break;
			case "dateNaissance":
				field.set(jean, new GregorianCalendar(1992,7,7).getTime());
				break;
			case "tel":
				field.set(jean, "0478776655");
				break;
			case "email":
				field.set(jean, "jean@gmail.com");
				break;
			case "dateInscription":
				field.set(jean, new GregorianCalendar(2017,9,2).getTime());
				break;
			case "nbContacts":
				field.set(jean, 5);
				break;
			/*case "anneeAcademique":
				field.set(jean, "2017-2018");
				break;*/
			case "estAdmin":
				field.setBoolean(jean, true);
				break;

			default:
				break;
			}
		}
	}

	@Test (expected=IllegalArgumentException.class)
	public void testVerifierMotDePasse1() {
		jean.verifierMotDePasse(null);
	}

	@Test
	public void testVerifierMotDePasse2() {
		assertEquals(false, jean.verifierMotDePasse("12345"));
		assertEquals(false, jean.verifierMotDePasse("123"));
		assertEquals(false, jean.verifierMotDePasse("toto"));
	}

	@Test
	public void testVerifierMotDePasse3() {
		assertEquals(true, jean.verifierMotDePasse("1234"));
	}
	
	@Test
	public void testGetPseudo() {
		assertEquals("jean92", jean.getPseudo());
	}
	
	@Test (expected= IllegalArgumentException.class)
	public void testSetPseudo1() {
		try{
			jean.setPseudo(null);
		}catch(IllegalArgumentException e){
			jean.setPseudo("");
		}
	}
	@Test
	public void testSetPseudo2() {
		jean.setPseudo("toto");
		assertEquals("toto",jean.getPseudo());
	}

	@Test
	public void testGetMdp() {
		assertEquals("1234", jean.getMdp());
	}

	@Test (expected= IllegalArgumentException.class)
	public void testSetMdp1() {
		try{
			jean.setMdp(null);
		}catch(IllegalArgumentException e){
			jean.setMdp("");
		}
	}
	@Test
	public void testSetMdp2() {
		jean.setMdp("9999");
		assertEquals("9999", jean.getMdp());
	}

	/*@Test
	public void testGetDateNaissance() {
		assertEquals(new GregorianCalendar(1992,7,7).getTime(), jean.getDateNaissance());
	}

	@Test
	public void testSetDateNaissance() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetTel() {
		assertEquals("0478776655", jean.getTel());
	}

	@Test (expected=IllegalArgumentException.class)
	public void testSetTel1() {
		try{
			jean.setTel(null);
		}catch (IllegalArgumentException e){
			jean.setTel("");
		}
	}

	@Test
	public void testSetTel2() {
		jean.setTel("0479008811");
		assertEquals("0479008811",jean.getTel());
	}

	@Test
	public void testGetEmail() {
		assertEquals("jean@gmail.com", jean.getEmail());
	}

	@Test (expected=IllegalArgumentException.class)
	public void testSetEmail1() {
		try{
			jean.setEmail(null);
		}catch (IllegalArgumentException e){
			jean.setEmail("");
		}
	}

	@Test
	public void testSetEmail2() {
		jean.setEmail("jean.neymar@live.be");
		assertEquals("jean.neymar@live.be", jean.getEmail());
	}

	@Test
	public void testGetDateInscription() {
		assertEquals(new GregorianCalendar(2017,9,2).getTime(), jean.getDateInscription());
	}

	@Test
	public void testSetDateInscription() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetAnneeAcademique() {
		assertEquals("2017-2018", jean.getAnneeAcademique());
	}*/
	/******/
	/*@Test (expected=IllegalArgumentException.class)
	public void testSetAnneeAcademique1() {
		try{
			jean.setAnneeAcademique(null);
		}catch (IllegalArgumentException e) {
			jean.setAnneeAcademique("");
		}
	}
	@Test
	public void testSetAnneeAcademique2() {
		jean.setAnneeAcademique("2016-2017");
		assertEquals("2016-2017", jean.getAnneeAcademique());
	}*/
	/*
	@Test
	public void testGetNbContacts() {
		assertEquals(5, jean.getNbContacts());
	}

	@Test (expected=IllegalArgumentException.class)
	public void testSetNbContacts1() {
		jean.setNbContacts(-2);
	}
	@Test
	public void testSetNbContacts2() {
		jean.setNbContacts(3);
		assertEquals(3, jean.getNbContacts());
	}

	@Test
	public void testGetNom() {
		assertEquals("neymar", jean.getNom());
	}
	
	@Test
	public void testSetNom() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetPrenom() {
		assertEquals("jean", jean.getPrenom());
	}
	
	@Test
	public void testSetPrenom() {
		fail("Not yet implemented");
	}

	@Test
	public void testEstAdmin() {
		assertEquals(true, jean.estAdmin());
	}
	@Test
	public void testSetAdmin() {
		fail("Not yet implemented");
	}
	*/

}
