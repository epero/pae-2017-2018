package biz.ucc;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;
import biz.contact.ContactBiz;
import biz.contact.ContactDto;
import biz.entreprise.EntrepriseDto;
import biz.user.UserDto;
import dal.dao.ContactDao;
import dal.dao.EntrepriseDao;
import dal.dao.PersonneContactDao;
import dal.dao.UserDao;
import dal.services.DalServices;
import exceptions.BizException;
import exceptions.OptimisticLockException;
import util.AppContext.DependanceInjection;
import util.Util;

public class ContactUccImpl implements ContactUcc {
  @DependanceInjection
  private ContactDao contactDao;
  @DependanceInjection
  private PersonneContactDao personneContactDao;
  @DependanceInjection
  private UserDao userDao;
  @DependanceInjection
  private EntrepriseDao entrepriseDao;
  @DependanceInjection
  private DalServices dalServices;


  @Override
  public List<ContactDto> listerContactUtilisateur(UserDto utilisateur) {
    Util.checkObject(utilisateur);
    List<ContactDto> listeContactDto;

    try {
      dalServices.startTransaction();
      UserDto userAVerifier = userDao.getUser(utilisateur.getIdUtilisateur());
      listeContactDto = contactDao.listerContactUtilisateur(userAVerifier);
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return listeContactDto;
  }

  @Override
  public ContactDto creerContactUtilisateur(ContactDto contact) {
    Util.checkObject(contact);
    Util.checkObject(contact.getEntrepriseDto());
    Util.checkObject(contact.getUtilisateurDto());
    // ContactBiz contactAVerif = (ContactBiz) contact;

    contact.setEtat(Util.Etat.INITIE.toString());
    contact.setAnneeAcademique(Util.localDateToYear(LocalDate.now()));
    contact.setNumVersion(1);

    ContactDto contactARenv;
    try {
      dalServices.startTransaction();
      UserDto userAVerifier = userDao.getUser(contact.getUtilisateurDto().getIdUtilisateur());
      EntrepriseDto entrepriseAVerifier =
          entrepriseDao.getEntreprise(contact.getEntrepriseDto().getIdEntreprise());
      if (userAVerifier == null || entrepriseAVerifier == null) {
        throw new BizException("L'entreprise ou l'utilisateur n'existe pas");
      }
      int idUtilisateur = userAVerifier.getIdUtilisateur();
      int idEntreprise = entrepriseAVerifier.getIdEntreprise();

      if (contactDao.existeContactsAccepteOuEnOrdre(idUtilisateur)) {
        throw new BizException("Vous ne pouvez plus initier de contact");
      }

      if (contactDao.existeContactForEntrepriseEtUser(idUtilisateur, idEntreprise)) {
        throw new BizException("Vous avez déjà initié un contact avec cette entreprise");
      }

      if (contact.getPersonneContactDto() != null) {
        if (!personneContactDao.personneDeContactAppartientEntreprise(
            contact.getPersonneContactDto().getIdPersonneContact(), idEntreprise)) {
          throw new BizException("Cette personne de contact n'appartient pas à cette entreprise");
        }
        contactARenv = contactDao.insertContactUtilisateurAvecPersonneContact(contact);
      } else {
        contactARenv = contactDao.insertContactUtilisateurSansPersonneContact(contact);
      }
      userAVerifier.setNbContacts(userAVerifier.getNbContacts() + 1);
      userDao.updateNombreContacts(userAVerifier);
      contactARenv.setUtilisateurDto(userDao.getUser(userAVerifier.getIdUtilisateur()));
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return contactARenv;
  }

  @Override
  public List<ContactDto> updateEtatContacts(List<ContactDto> listeContactsDto) {
    Util.checkObject(listeContactsDto);
    // TODO ordonner plus proprement
    Collections.sort(listeContactsDto, (t1, t2) -> t2.getEtat().compareTo(t1.getEtat()));
    List<ContactDto> contactsDb = new ArrayList<ContactDto>();

    try {
      dalServices.startTransaction();

      for (ContactDto contactDto : listeContactsDto) {
        boolean updateEstValide = false;
        // checks pour voir si on peut faire l'update(si le contact courant est refuse ou stage en
        // ordre on ne peut plus changer d'etat)
        ContactDto contactDbInitial = contactDao.getContact(contactDto.getIdContact());
        if (contactDbInitial == null) {
          throw new BizException("Un ou plusieurs contacts n'existent pas");
        }
        if (contactDbInitial.getNumVersion() != contactDto.getNumVersion()) {
          throw new OptimisticLockException(
              "Un ou plusieurs contacts ont étés modifiés entre temps", contactDbInitial);
        }
        String etatInitial = contactDbInitial.getEtat();
        if (etatInitial.equals(ContactBiz.Etat.INITIE.toString())) {
          if (contactDto.getEtat().equals(ContactBiz.Etat.PRIS.toString())
              || contactDto.getEtat().equals(ContactBiz.Etat.ACCEPTE.toString())
              || contactDto.getEtat().equals(ContactBiz.Etat.REFUSE.toString())) {
            updateEstValide = true;
          }
        } else if (etatInitial.equals(ContactBiz.Etat.PRIS.toString())) {
          if (contactDto.getEtat().equals(ContactBiz.Etat.ACCEPTE.toString())
              || contactDto.getEtat().equals(ContactBiz.Etat.REFUSE.toString())) {
            updateEstValide = true;
          }
        } else if (etatInitial.equals(ContactBiz.Etat.ACCEPTE.toString())) {
          if (contactDto.getEtat().equals(ContactBiz.Etat.STAGE_EN_ORDRE.toString())) {
            updateEstValide = true;
          }
        }
        // check si il existe pas deja un autre contact à l'état accepte ou stage en ordre
        if (contactDao.existeContactAvecEtat(
            listeContactsDto.get(0).getUtilisateurDto().getIdUtilisateur(),
            ContactBiz.Etat.ACCEPTE.toString())
            || contactDao.existeContactAvecEtat(
                listeContactsDto.get(0).getUtilisateurDto().getIdUtilisateur(),
                ContactBiz.Etat.STAGE_EN_ORDRE.toString())) {
          throw new BizException(
              "Impossible d'avoir plusieurs contacts acceptés et/ou stage en ordre. Recommencez ");
        }
        if (updateEstValide) {
          contactsDb.add(contactDao.updateEtatContact(contactDto));
        } else {
          throw new BizException("Action interdite sur un ou plusieurs contacts");
        }
      }

    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
    return contactsDb;
  }

  @Override
  public boolean existeContactAccepte(int idUser) {
    try {
      dalServices.startTransaction();
      return contactDao.existeContactAvecEtat(idUser, ContactBiz.Etat.ACCEPTE.toString());
    } catch (Exception ex) {
      Logger.getLogger("stagifyLogger").fine(ex.getMessage());
      dalServices.rollback();
      throw ex;
    } finally {
      dalServices.commitTransaction();
    }
  }

  // @Override
  // public List<ContactDto> listerContactUtilisateur(int idUtilisateur) {
  // return contactDao.listerContactUtilisateur(idUtilisateur);
  // }


}
