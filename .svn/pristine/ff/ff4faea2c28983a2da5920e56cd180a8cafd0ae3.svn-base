package util;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Properties;

public class AppContext {

  private static HashMap<Class<?>, Object> instances = new HashMap<Class<?>, Object>();

  @Retention(RetentionPolicy.RUNTIME)
  public @interface dependanceInjection {
  }

  public static void newInstance(Object objet, String fichier) throws FileNotFoundException,
      IllegalArgumentException, IllegalAccessException, ClassNotFoundException {

    for (Field field : objet.getClass().getDeclaredFields()) {
      if (field.isAnnotationPresent(dependanceInjection.class)) {

        Properties props = new Properties();
        FileInputStream file;

        try {
          file = new FileInputStream("conf/" + fichier);
        } catch (FileNotFoundException e) {
          System.out.println("run du fichier par defaut");
          file = new FileInputStream("conf/dev.properties");
        } catch (Throwable e) {
          throw new RuntimeException(e);
        }

        try {
          props.load(file);
          file.close();
        } catch (IOException e1) {
          // TODO Auto-generated catch block
          e1.printStackTrace();
        }

        Object ob;
        Class<?> cl;
        String implName = props.getProperty(field.getType().getCanonicalName());
        cl = Class.forName(implName);

        if (!instances.containsKey(cl)) {
          try {
            Constructor c = cl.getDeclaredConstructor();
            c.setAccessible(true);
            ob = c.newInstance();
            instances.put(cl, ob);
            newInstance(ob, fichier);
          } catch (Throwable e) {
            throw new RuntimeException(e);
          }
        }

        field.setAccessible(true);
        field.set(objet, instances.get(cl));
      }
    }
  }

  public static Properties loadDevProps() {

    Properties props = new Properties();
    FileInputStream file = null;

    try {
      file = new FileInputStream("conf/dev.properties");
    } catch (FileNotFoundException ex) {
      ex.printStackTrace();
      System.exit(1);
    }

    try {
      props.load(file);
    } catch (IOException ex) {
      ex.printStackTrace();
      System.exit(2);
    }

    try {
      file.close();
    } catch (IOException ex) {
      System.out.println("Erreur de fermeture du fichier properties");
    }

    return props;
  }

  public static Properties loadProdProps() {

    Properties props = new Properties();
    FileInputStream file = null;

    try {
      file = new FileInputStream("conf/prod.properties");
    } catch (FileNotFoundException ex) {
      ex.printStackTrace();
      System.exit(1);
    }

    try {
      props.load(file);
    } catch (IOException ex) {
      ex.printStackTrace();
      System.exit(2);
    }

    try {
      file.close();
    } catch (IOException ex) {
      System.out.println("Erreur de fermeture du fichier properties");
    }

    return props;
  }
}

