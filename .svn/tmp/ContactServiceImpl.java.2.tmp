package ihm.services;

import java.io.IOException;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.owlike.genson.Genson;
import com.owlike.genson.GensonBuilder;
import biz.contact.ContactDto;
import biz.factory.BizFactory;
import biz.ucc.ContactUcc;
import biz.user.UserDto;
import exceptions.OptimisticLockException;
import ihm.servlet.DispatcherServlet;
import util.AppContext;
import util.AppContext.DependanceInjection;

public class ContactServiceImpl implements ContactService {

  @DependanceInjection
  UtilService utilService;
  @DependanceInjection
  BizFactory factory;
  @DependanceInjection
  ContactUcc contactUcc;
  @DependanceInjection
  AppContext appContext;

  private Genson genson = new GensonBuilder().useIndentation(true)
      .useDateFormat(new SimpleDateFormat("dd-MM-yyyy")).create();

  private Genson gensonUser =
      new GensonBuilder().useIndentation(true).exclude("mdp").exclude("dateInscription").create();

  private Genson gensonUpdateContact = new GensonBuilder().exclude("entrepriseDto")
      .exclude("personneContactDto").exclude("utilisateurDto").useIndentation(true).create();

  private String json;


  public void creerContactAsStud(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("newContact");
    Map<String, Object> jsonMap = genson.deserialize(json, Map.class);
    ContactDto contactDb;
    try {
      contactDb =
          contactUcc.creerContactUtilisateur(DispatcherServlet.currentUser.getIdUtilisateur(),
              DispatcherServlet.currentUser.getNumVersion(),
              Integer.parseInt("" + jsonMap.get("idEntreprise")), jsonMap.get("idPersonneContact"));

    } catch (OptimisticLockException ex) {
      contactDb = (ContactDto) ex.getObjetEnDb();
      req.getSession().setAttribute("userDb", contactDb.getUtilisateurDto());
      utilService.renvoyerCodeErrEtMessEtObj(resp, ex, 409, contactDb.getUtilisateurDto(), genson);
      return;
    }

    if (contactDb != null) {
      json = gensonUser.serialize(contactDb);
      req.getSession().setAttribute("userDb", contactDb.getUtilisateurDto());
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  public void creerContactAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("newContact");
    Map<String, Object> jsonMap = genson.deserialize(json, Map.class);

    String user = req.getParameter("selectedStud");
    Map<String, Object> jsonMapUser = genson.deserialize(user, Map.class);

    ContactDto contactDb;
    try {
      contactDb = contactUcc.creerContactUtilisateur(
          Integer.parseInt("" + jsonMapUser.get("idUtilisateur")),
          Integer.parseInt("" + jsonMapUser.get("numVersion")),
          Integer.parseInt("" + jsonMap.get("idEntreprise")), jsonMap.get("idPersonneContact"));

    } catch (OptimisticLockException ex) {
      utilService.renvoyerCodeErr(resp, ex, 409);
      return;
    }
    if (contactDb != null) {
      json = genson.serialize(contactDb);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }



  public void modifierEtatContactsAsStud(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("contacts");

    ContactDto[] tabContacts = (ContactDto[]) gensonUpdateContact.deserialize(json,
        appContext.getClassValueProp("[Lbiz.contact.ContactDto"));

    UserDto userDb;
    try {
      userDb = contactUcc.updateEtatContacts(Arrays.asList(tabContacts),
          DispatcherServlet.currentUser.getIdUtilisateur(),
          DispatcherServlet.currentUser.getNumVersion());
      if (userDb == null) {
        utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
      }
    } catch (OptimisticLockException ex) {
      Object object = ex.getObjetEnDb();
      if (object.getClass() == UserDto.class) {
        userDb = (UserDto) ex.getObjetEnDb();
        req.getSession().setAttribute("userDb", userDb);
        utilService.renvoyerCodeErrEtMessEtObj(resp, ex, 409, userDb, genson);
      } else {
        utilService.renvoyerCodeErr(resp, ex, 409);
      }
      return;
    }
    req.getSession().setAttribute("userDb", userDb);
    json = genson.serialize(userDb);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void modifierEtatContactsAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("selectedStud");
    Map<String, Object> jsonMapUser = genson.deserialize(json, Map.class);
    System.out.println(jsonMapUser.get("idUtilisateur"));
    UserDto selectedStud = factory.getUserVide();
    selectedStud.setIdUtilisateur(Integer.parseInt("" + jsonMapUser.get("idUtilisateur")));
    selectedStud.setNumVersion(Integer.parseInt("" + jsonMapUser.get("numVersion")));
    json = req.getParameter("contacts");

<<<<<<< .mine
    ContactDto[] tabContacts = (ContactDto[]) gensonUpdateContact.deserialize(json,
        appContext.getClassValueProp("[Lbiz.contact.ContactDto"));
=======
    ContactDto[] tabContacts = gensonUpdateContact.deserialize(json, ContactImpl[].class);

>>>>>>> .r465

    UserDto userDb;
    try {
      userDb = contactUcc.updateEtatContacts(Arrays.asList(tabContacts),
          selectedStud.getIdUtilisateur(), selectedStud.getNumVersion());
      if (userDb == null) {
        utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
      }
    } catch (OptimisticLockException ex) {
      utilService.renvoyerCodeErr(resp, ex, 409);
      return;
    }
    json = genson.serialize(userDb);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void visualiserContacts(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    List<ContactDto> contacts =
        contactUcc.listerContactUtilisateur(DispatcherServlet.currentUser.getIdUtilisateur());
    if (contacts != null) {
      json = genson.serialize(contacts);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  public void visualiserContactsAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    List<ContactDto> contacts =
        contactUcc.listerContactUtilisateur(Integer.parseInt(req.getParameter("selectedStud")));
    if (contacts != null) {
      json = genson.serialize(contacts);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }



}
