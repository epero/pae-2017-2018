package ihm.servlet;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.eclipse.jetty.servlet.DefaultServlet;
import com.auth0.jwt.JWTSigner;
import com.auth0.jwt.JWTVerifier;
import com.owlike.genson.Genson;
import biz.ucc.UserUcc;
import exceptions.FatalException;
import util.AppContext;
import util.AppContext.DependanceInjection;


class DispatcherServlet extends DefaultServlet {


  @DependanceInjection
  private AppContext appContext;
  @DependanceInjection
  private UserUcc userUCC;


  @Override
  protected void doGet(HttpServletRequest req, HttpServletResponse resp) {

    // TODO Parcourir les dossiers www et www/js pour cr√©er les tag <script> contenant le nom de
    // fichier .js et les append au prefooter.html
    try {
      if (req.getRequestURI().equals("/")) {
        Files.copy(new File("inc/header.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_login.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_congrats.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/prefooter.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/footer.html").toPath(), resp.getOutputStream());
      } else {
        super.doGet(req, resp);
      }
    } catch (IOException | ServletException ex) {
      ex.printStackTrace();
      resp.setStatus(500);
      throw new FatalException();
    }
  }

  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp) {
    resp.setContentType("text/html; charset=UTF-8");
    String action = req.getParameter("action");
    try {
      switch (action) {
        case "signin":
          signin(req, resp);
          break;
        // case "signup":
        // signup(req, resp);
        // break;
        case "whoami":
          whoami(req, resp);
          break;
        case "logout":
          logout(req, resp);
          break;
        default:
          break;
      }
    } catch (FatalException ex) {
      ex.printStackTrace();
      resp.setStatus(500);
      throw new FatalException();
    }
  }

  private void signin(HttpServletRequest req, HttpServletResponse resp) {

    String login = req.getParameter("user");
    String password = req.getParameter("pswd");

    // si l utilisateur peut se connecter
    if (userUCC.seConnecter(login, password) != null) {
      try {
        resp.getOutputStream().write("ok".getBytes(Charset.forName("UTF-8")));
      } catch (IOException ex) {
        ex.printStackTrace();
        throw new FatalException();
      }

      Map<String, Object> claims = new HashMap<>();
      claims.put("user", login);
      claims.put("ip", req.getRemoteAddr());

      String secret = appContext.getValueProp("JWTSecret");

      String token = new JWTSigner(secret).sign(claims);

      Cookie cookie = new Cookie("token", token);
      cookie.setPath("/");
      cookie.setMaxAge(60 * 60 * 24 * 365);
      resp.addCookie(cookie);


    } else {
      try {
        resp.getOutputStream().write("ko".getBytes(Charset.forName("UTF-8")));
      } catch (IOException e) {
        e.printStackTrace();
        throw new FatalException();
      }
    }

  }

  /*
   * private void signup(HttpServletRequest req, HttpServletResponse resp) throws IOException {
   * 
   * String login = req.getParameter("user"); String password = req.getParameter("pswd"); // TO
   * CONTINUE
   * 
   * // VINCENT String pwHash = hashpw(password); }
   */

  private void whoami(HttpServletRequest req, HttpServletResponse resp) {

    // TODO recuperer user
    // TODO stocker id

    String whoami = getCurrentUser(req);
    String json = new Genson().serialize(whoami);
    resp.setContentType("application/json");
    try {
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } catch (IOException ex) {
      ex.printStackTrace();
      throw new FatalException();
    }
  }

  private String getCurrentUser(HttpServletRequest req) {

    String whoami = null;
    String token = null;

    Cookie[] cookies = req.getCookies();
    if (cookies != null) {
      for (Cookie cookie : cookies) {
        if ("token".equals(cookie.getName()) && cookie.getSecure()) {
          token = cookie.getValue();
        } else if ("token".equals(cookie.getName()) && token == null) {
          token = cookie.getValue();
        }
      }
    }
    if (token == null) {
      return null;
    }

    try {
      Map<String, Object> decodedPayload =
          new JWTVerifier(appContext.getValueProp("JWTSecret")).verify(token);
      if (!req.getRemoteAddr().equals(decodedPayload.get("ip"))) {
        return null;
      }
      whoami = (String) decodedPayload.get("user");
    } catch (Exception ex) {
      System.out.println("pas de token");
      // ex.printStackTrace();
    }
    return whoami;
  }

  private void logout(HttpServletRequest req, HttpServletResponse resp) {

    Cookie cookie = new Cookie("token", "");
    cookie.setPath("/");
    cookie.setMaxAge(-1);
    resp.addCookie(cookie);
  }
}
