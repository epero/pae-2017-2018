package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import biz.factory.BizFactory;
import biz.user.UserDto;
import dal.services.DalBackendServices;
import exceptions.FatalException;
import util.AppContext.DependanceInjection;
import util.DaoUtil;


class UserDaoImpl implements UserDao {

  @DependanceInjection
  private DalBackendServices dalBackendService;

  @DependanceInjection
  private BizFactory factory;

  @Override
  public UserDto getUser(String pseudo) {
    final String query = "SELECT * FROM stagify.utilisateurs WHERE pseudo = ?";
    // PreparedStatement plutot dans les variables globales de la classe?
    // -> Bonne pratique avec PreparedStatement : les créer une seule fois (au démarrage ou au
    // premier usage)
    PreparedStatement preparedStatement;
    UserDto user;
    List<UserDto> users;

    try {
      preparedStatement = dalBackendService.getPreparedStatement(query);

      // on ne rentrera jamais dans ce if
      if (preparedStatement == null) {
        throw new FatalException("Impossible de récuperer le preparedStatement");
      }
      DaoUtil.setPreparedStatement(preparedStatement, pseudo);
      try (ResultSet resultSet = preparedStatement.executeQuery()) {
        user = (UserDto) factory.getUserVide();
        users = (List<UserDto>) (Object) DaoUtil.setResultSet(user.getClass(), resultSet);
      }
    } catch (SQLException ex) {
      throw new FatalException(
          "Erreur lors de la récupération de l'utilisateur dans la base de données.");
    }
    if (users == null || users.isEmpty()) {
      return null;
    }
    return users.get(0);
  }

  @Override
  public UserDto getUser(int idUtilisateur) {
    final String query = "SELECT * FROM stagify.utilisateurs WHERE id_utilisateur = ?";

    PreparedStatement preparedStatement;
    UserDto user;
    List<UserDto> users;

    try {
      preparedStatement = dalBackendService.getPreparedStatement(query);

      // on ne rentrera jamais dans ce if
      if (preparedStatement == null) {
        throw new FatalException("Impossible de récuperer le preparedStatement");
      }
      DaoUtil.setPreparedStatement(preparedStatement, idUtilisateur);
      try (ResultSet resultSet = preparedStatement.executeQuery()) {
        user = (UserDto) factory.getUserVide();
        users = (List<UserDto>) (Object) DaoUtil.setResultSet(user.getClass(), resultSet);
      }
    } catch (SQLException ex) {
      throw new FatalException(
          "Erreur lors de la récupération de l'utilisateur dans la base de données.");
    }
    if (users == null || users.isEmpty()) {
      return null;
    }
    return users.get(0);
  }

  public UserDto updateUser(UserDto user) {

    String query = "UPDATE stagify.utilisateurs "
        + "SET nom = ?, prenom = ?, date_naissance = ?, tel = ?, email = ? "
        + "WHERE id_utilisateur = ?";
    PreparedStatement ps = dalBackendService.getPreparedStatement(query);
    Timestamp dateNaissance = Timestamp.valueOf(user.getDateNaissance().atStartOfDay());

    DaoUtil.setPreparedStatement(ps, user.getNom(), user.getPrenom(), dateNaissance, user.getTel(),
        user.getEmail(), user.getIdUtilisateur());

    try {

      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        return user;
      } else {
        return null;
      }
    } catch (SQLException ex) {
      ex.printStackTrace();
      System.out.println("Erreur lors de l'update !");
      throw new FatalException("Erreur lors de l'accès DB");
    }
  }

  @Override
  public boolean pseudoUserExiste(String pseudo) {
    String query = "SELECT pseudo FROM stagify.utilisateurs WHERE pseudo='" + pseudo + "'";
    PreparedStatement ps = dalBackendService.getPreparedStatement(query);
    try (ResultSet rs = ps.executeQuery()) {
      if (rs.next()) {
        return true;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      System.out.println("Erreur lors de la recherche du pseudo!");
      throw new FatalException("Erreur acces Db");
    }
  }

  @Override
  public boolean emailUserExiste(String email) {
    String query = "SELECT email FROM stagify.utilisateurs WHERE email='" + email + "'";
    PreparedStatement ps = dalBackendService.getPreparedStatement(query);
    try (ResultSet resultSet = ps.executeQuery()) {
      if (resultSet.next()) {
        return true;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      System.out.println("Erreur lors de la recherche de l email!");
      throw new FatalException("Erreur acces Db");
    }
  }



  @Override
  public UserDto insertUser(UserDto user) {
    String query = "INSERT INTO stagify.utilisateurs"
        + "(pseudo, mdp, nom, prenom, date_naissance, tel, email, date_inscription, annee_academique, est_admin, nb_contacts)"
        + "VALUES (?,?,?,?,?,?,?,?,?,?,?)";
    PreparedStatement ps = dalBackendService.getPreparedStatementForInsert(query);// ? PS
    Timestamp dateNaissance = Timestamp.valueOf(user.getDateNaissance().atStartOfDay());
    Timestamp dateInscription = Timestamp.valueOf(user.getDateInscription().atStartOfDay());

    DaoUtil.setPreparedStatement(ps, user.getPseudo(), user.getMdp(), user.getNom(),
        user.getPrenom(), dateNaissance, user.getTel(), user.getEmail(), dateInscription,
        user.getAnneeAcademique(), user.getEstAdmin(), user.getNbContacts());
    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
          if (generatedKeys.next()) {
            System.out.println(generatedKeys);
            user.setIdUtilisateur((generatedKeys.getInt(1)));
          }
        }
        return user;
      } else {
        throw new FatalException("Erreur de programmation");
      }
    } catch (SQLException ex) {
      ex.printStackTrace();
      System.out.println("Erreur lors de l'insertion !");
      throw new FatalException("Erreur lors de l'accès DB");
    }
  }

  @Override
  public boolean incrementNumberOfContacts(int idUtilisateur) {
    String query =
        "UPDATE stagify.utilisateurs SET nb_contacts = nb_contacts+1 WHERE id_utilisateur = ?";
    PreparedStatement ps = dalBackendService.getPreparedStatement(query);
    DaoUtil.setPreparedStatement(ps, idUtilisateur);

    try {
      int codeRetour = ps.executeUpdate();
      if (codeRetour == 1) {
        return true;
      } else {
        return false;
      }
    } catch (SQLException ex) {
      System.out.println("Erreur lors de l'update !");
      throw new FatalException("Erreur lors de l'accès DB");
    }
  }
}
