package ihm.services;

import java.io.IOException;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.owlike.genson.Genson;
import com.owlike.genson.GensonBuilder;
import biz.contact.ContactDto;
import biz.contact.ContactImpl;
import biz.factory.BizFactory;
import biz.ucc.ContactUcc;
import biz.user.UserDto;
import biz.user.UserImpl;
import exceptions.OptimisticLockException;
import ihm.servlet.DispatcherServlet;
import util.AppContext.DependanceInjection;

public class ContactServiceImpl implements ContactService {

  @DependanceInjection
  UtilService utilService;
  @DependanceInjection
  BizFactory factory;
  @DependanceInjection
  ContactUcc contactUcc;

  private Genson genson = new GensonBuilder().useIndentation(true)
      .useDateFormat(new SimpleDateFormat("dd-MM-yyyy")).create();
  private String json;


  public void creerContact(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    json = req.getParameter("newContact");
    Map<String, Object> jsonMap = genson.deserialize(json, Map.class);

    Genson ge = new GensonBuilder().useIndentation(true).exclude("mdp", UserImpl.class)
        .exclude("dateInscription", UserImpl.class).create();

    ContactDto contactDb;
    try {
      contactDb =
          contactUcc.creerContactUtilisateur(DispatcherServlet.currentUser.getIdUtilisateur(),
              DispatcherServlet.currentUser.getNumVersion(),
              Integer.parseInt("" + jsonMap.get("idEntreprise")),
              "" + jsonMap.get("idPersonneContact"));

    } catch (OptimisticLockException ex) {
      contactDb = (ContactDto) ex.getObjetEnDb();
      req.getSession().setAttribute("userDb", contactDb.getUtilisateurDto());
      utilService.renvoyerCodeErrEtMessEtObj(resp, ex, 409, contactDb.getUtilisateurDto(), genson);
      return;
    }

    if (contactDb != null) {
      json = ge.serialize(contactDb);
      req.getSession().setAttribute("userDb", contactDb.getUtilisateurDto());
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  public void creerContactAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("newContact");
    Map<String, Object> jsonMap = genson.deserialize(json, Map.class);

    String user = req.getParameter("selectedStud");
    Map<String, Object> jsonMapUser = genson.deserialize(user, Map.class);

    ContactDto contactDb;
    try {
      contactDb = contactUcc.creerContactUtilisateur(
          Integer.parseInt("" + jsonMapUser.get("idUtilisateur")),
          Integer.parseInt("" + jsonMapUser.get("numVersion")),
          Integer.parseInt("" + jsonMap.get("idEntreprise")),
          "" + jsonMap.get("idPersonneContact"));

    } catch (OptimisticLockException ex) {
      utilService.renvoyerCodeErr(resp, ex, 409);
      return;
    }
    if (contactDb != null) {
      Genson gen = new GensonBuilder().useIndentation(true).create();
      json = gen.serialize(contactDb);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  public void existeContactAccepte(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    UserDto whoami = DispatcherServlet.currentUser;
    boolean existeContactAccepte = contactUcc.existeContactAccepte(whoami.getIdUtilisateur());
    json = genson.serialize(existeContactAccepte);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));

  }

  public void existeContactAccepteAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    UserDto selectedStud = factory.getUserVide();
    selectedStud.setIdUtilisateur(Integer.parseInt(req.getParameter("selectedStud")));
    System.out.println(selectedStud);
    boolean existeContactAccepte = contactUcc.existeContactAccepte(selectedStud.getIdUtilisateur());
    json = genson.serialize(existeContactAccepte);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void modifierEtatContacts(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("contacts");

    Genson ge = new GensonBuilder().exclude("entrepriseDto", ContactImpl.class)
        .exclude("personneContactDto", ContactImpl.class)
        .exclude("utilisateurDto", ContactImpl.class).useIndentation(true).create();
    // TODO transformer ca direct en arrayList
    ContactDto[] tabContacts = ge.deserialize(json, ContactImpl[].class);
    List<ContactDto> listeContacts = new ArrayList<>();
    for (ContactDto contactDto : tabContacts) {
      listeContacts.add(contactDto);
    }
    UserDto userDb;
    try {
      userDb = contactUcc.updateEtatContacts(listeContacts,
          DispatcherServlet.currentUser.getIdUtilisateur(),
          DispatcherServlet.currentUser.getNumVersion());
      if (userDb == null) {
        utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
      }
    } catch (OptimisticLockException ex) {
      Object object = ex.getObjetEnDb();
      if (object.getClass() == UserDto.class) {
        userDb = (UserDto) ex.getObjetEnDb();
        req.getSession().setAttribute("userDb", userDb);
        utilService.renvoyerCodeErrEtMessEtObj(resp, ex, 409, userDb, genson);
      } else {
        utilService.renvoyerCodeErr(resp, ex, 409);
      }
      return;
    }
    req.getSession().setAttribute("userDb", userDb);
    json = genson.serialize(userDb);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void modifierEtatContactsAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("selectedStud");
    Map<String, Object> jsonMapUser = genson.deserialize(json, Map.class);
    System.out.println(jsonMapUser.get("idUtilisateur"));
    UserDto selectedStud = factory.getUserVide();
    selectedStud.setIdUtilisateur(Integer.parseInt("" + jsonMapUser.get("idUtilisateur")));
    selectedStud.setNumVersion(Integer.parseInt("" + jsonMapUser.get("numVersion")));
    json = req.getParameter("contacts");

    Genson ge = new GensonBuilder().exclude("entrepriseDto", ContactImpl.class)
        .exclude("personneContactDto", ContactImpl.class)
        .exclude("utilisateurDto", ContactImpl.class).useIndentation(true).create();
    ContactDto[] tabContacts = ge.deserialize(json, ContactImpl[].class);
    List<ContactDto> listeContacts = new ArrayList<>();

    for (ContactDto contactDto : tabContacts) {
      listeContacts.add(contactDto);
    }
    UserDto userDb;
    try {
      userDb = contactUcc.updateEtatContacts(listeContacts, selectedStud.getIdUtilisateur(),
          selectedStud.getNumVersion());
      if (userDb == null) {
        utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
      }
    } catch (OptimisticLockException ex) {
      utilService.renvoyerCodeErr(resp, ex, 409);
      return;
    }
    json = genson.serialize(userDb);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void visualiserContacts(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    List<ContactDto> contacts =
        contactUcc.listerContactUtilisateur(DispatcherServlet.currentUser.getIdUtilisateur());
    if (contacts != null) {
      json = genson.serialize(contacts);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  public void visualiserContactsAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    List<ContactDto> contacts =
        contactUcc.listerContactUtilisateur(Integer.parseInt(req.getParameter("selectedStud")));
    if (contacts != null) {
      json = genson.serialize(contacts);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      utilService.renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }



}
