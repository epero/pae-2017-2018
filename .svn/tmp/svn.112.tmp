package ihm.servlet;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.eclipse.jetty.servlet.DefaultServlet;
import com.auth0.jwt.JWTSigner;
import com.auth0.jwt.JWTVerifier;
import com.owlike.genson.Genson;
import com.owlike.genson.GensonBuilder;
import biz.contact.ContactDto;
import biz.entreprise.EntrepriseDto;
import biz.factory.BizFactory;
import biz.pdc.PersonneContactDto;
import biz.stage.StageDto;
import biz.stage.StageImpl;
import biz.ucc.ContactUcc;
import biz.ucc.EntrepriseUcc;
import biz.ucc.PersonneContactUcc;
import biz.ucc.StageUcc;
import biz.ucc.UserUcc;
import biz.user.UserDto;
import biz.user.UserImpl;
import exceptions.BizException;
import exceptions.OptimisticLockException;
import util.AppContext;
import util.AppContext.DependanceInjection;
import util.Util;


class DispatcherServlet extends DefaultServlet {

  // Nécessaire pour la sérialisation, pas besoin de modifier ce numéro dans notre cas
  private static final long serialVersionUID = 1L;

  @DependanceInjection
  private transient AppContext appContext;
  @DependanceInjection
  private transient UserUcc userUcc;
  @DependanceInjection
  private transient BizFactory factory;
  @DependanceInjection
  private transient PersonneContactUcc personneContactUcc;
  @DependanceInjection
  private transient EntrepriseUcc entrepriseUcc;
  @DependanceInjection
  private transient ContactUcc contactUcc;
  @DependanceInjection
  private transient StageUcc stageUcc;

  private String json;
  private Genson genson;
  private Map<String, Object> retour;
  private UserDto currentUser;

  public DispatcherServlet() {
    genson = new GensonBuilder().useIndentation(true)
        .useDateFormat(new SimpleDateFormat("dd-MM-yyyy")).create();
  }

  @Override
  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    // TODO Parcourir les dossiers www et www/js pour créer les tag <script> contenant le nom de
    // fichier .js et les append au prefooter.html
    try {
      if (req.getRequestURI().equals("/")) {
        Files.copy(new File("inc/header.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/navbar.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_login.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_signup.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_dashboard.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_entreprises.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_fatalerror.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/_donneesPerso.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/prefooter.html").toPath(), resp.getOutputStream());
        Files.copy(new File("inc/footer.html").toPath(), resp.getOutputStream());
      } else {
        super.doGet(req, resp);
      }
    } catch (ServletException ex) {
      renvoyerCodeErr(resp, ex, 500);
    }
  }

  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    resp.setContentType("text/html; charset=UTF-8");
    String action = req.getParameter("action");
    currentUser = getCurrentUser(req);
    System.out.println(action);
    // TODO Déplacer les méthodes dans une classe dédiée
    try {
      if (currentUser == null) {
        switch (action) {
          case "signin":
            signin(req, resp);
            return;
          case "signup":
            signup(req, resp);
            return;
          case "whoami":
            whoami(req, resp);
            return;
          default:
            break;
        }
      } else {
        switch (action) {
          case "whoami":
            whoami(req, resp);
            return;
          case "logout":
            logout(req, resp);
            return;
          case "visualiserEntreprises":
            visualiserEntreprises(req, resp);
            return;
          case "getEntreprise":
            getEntreprise(req, resp);
            return;
          case "visualiserPersonneContact":
            visualiserPersonnesContact(req, resp);
            return;
          case "creerPersonneContact":
            creerPersonneContact(req, resp);
            return;
          case "visualiserContacts":
            visualiserContacts(req, resp);
            return;
          case "creerContact":
            creerContact(req, resp);
            return;
          case "modifierEtatContact":
            modifierEtatContacts(req, resp);
            return;
          case "existeContactAccepte":
            existeContactAccepte(req, resp);
            return;
          case "getInfosPersoUser":
            getInfosPersoUser(req, resp);
            return;
          case "setInfosPersoUser":
            setInfosPersoUser(req, resp);
            return;
          case "setMdpUser":
            setMdpUser(req, resp);
            return;
          case "fillChartTeacher":
            fillChartTeacher(req, resp);
            return;
          case "fillChartStudent":
            fillChartStudent(req, resp);
            return;
          case "visualiserStage":
            visualiserStage(req, resp);
            return;
          default:
            break;
        }
        if (currentUser.getEstAdmin()) {
          switch (action) {
            case "fillChartTeacher":
              fillChartTeacher(req, resp);
              return;
            case "visualiserUsers":
              visualiserUsersEtResponsables(req, resp);
              return;
            case "visualiserStudCurYear":
              visualiserStudCurYear(req, resp);
              return;
            case "visualiserContactsAsProf":
              visualiserContactsAsProf(req, resp);
              return;
            case "existeContactAccepteAsProf":
              existeContactAccepteAsProf(req, resp);
              return;
            case "fillChartStudentAsProf":
              fillChartStudentAsProf(req, resp);
              return;
            default:
              break;
          }
        }
      }
    } catch (BizException ex) {
      renvoyerCodeErr(resp, ex, 422);
      return;
    } catch (Exception ex) {
      renvoyerCodeErr(resp, ex, 500);
      return;
    }
    System.out.println(action);
    renvoyerCodeErrEtMess(resp, "Action Interdite", 401);
  }

  private void visualiserStage(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    UserDto whoami = getCurrentUser(req);
    StageDto stage = stageUcc.visualiserStage(whoami.getIdUtilisateur());

    Genson ge = new GensonBuilder().useIndentation(true).exclude("utilisateur", StageImpl.class)
        .exclude("utilisateurDto", StageImpl.class).create();

    if (stage != null) {
      json = ge.serialize(stage);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }

  }

  private void fillChartStudent(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    json = genson.serialize(userUcc.getStudentStats(currentUser));
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  private void fillChartStudentAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    UserDto selectedStud = factory.getUserVide();
    selectedStud.setIdUtilisateur(Integer.parseInt(req.getParameter("selectedStud")));
    json = genson.serialize(userUcc.getStudentStats(selectedStud));
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  private void fillChartTeacher(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = genson.serialize(userUcc.getStudentsStats());
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  private void creerContact(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    json = req.getParameter("newContact");
    ContactDto contactAVerif = factory.getContactVide();
    Genson ge = new GensonBuilder().useIndentation(true).useClassMetadata(true).useRuntimeType(true)
        .create();
    ge.deserializeInto(json, contactAVerif);
    UserDto whoami = getCurrentUser(req);
    if (contactAVerif.getUtilisateurDto().getIdUtilisateur() != whoami.getIdUtilisateur()) {
      renvoyerCodeErrEtMess(resp, "Action interdite", 401);
    }
    contactAVerif.setUtilisateurDto(whoami);
    ContactDto contactDb = contactUcc.creerContactUtilisateur(contactAVerif);

    if (contactDb != null) {
      Genson gen = new GensonBuilder().useIndentation(true).create();
      json = gen.serialize(contactDb);
      req.getSession().removeAttribute("userDb");
      req.getSession().setAttribute("userDb", contactDb.getUtilisateurDto());
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }

  }

  private void modifierEtatContacts(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    int idContact = Integer.parseInt(req.getParameter("idContact"));
    String etat = req.getParameter("etat");
    ContactDto contact = contactUcc.updateEtatContact(idContact, etat);
    // NE PAS RAJOUTER if (contact != null) car si contact==null c'est qu'il ne faut rien faire
    // (voir dashboardstudent.js)
    json = genson.serialize(contact);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));

  }

  private void visualiserContacts(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    UserDto whoami = getCurrentUser(req);
    List<ContactDto> contacts = contactUcc.listerContactUtilisateur(whoami);
    if (contacts != null) {
      json = genson.serialize(contacts);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }

  }

  private void visualiserContactsAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    UserDto selectedStud = factory.getUserVide();
    selectedStud.setIdUtilisateur(Integer.parseInt(req.getParameter("selectedStud")));
    List<ContactDto> contacts = contactUcc.listerContactUtilisateur(selectedStud);
    if (contacts != null) {
      json = genson.serialize(contacts);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  public void existeContactAccepte(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    UserDto whoami = getCurrentUser(req);
    boolean existeContactAccepte = contactUcc.existeContactAccepte(whoami.getIdUtilisateur());
    json = genson.serialize(existeContactAccepte);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));

  }

  public void existeContactAccepteAsProf(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    UserDto selectedStud = factory.getUserVide();
    selectedStud.setIdUtilisateur(Integer.parseInt(req.getParameter("selectedStud")));
    boolean existeContactAccepte = contactUcc.existeContactAccepte(selectedStud.getIdUtilisateur());
    json = genson.serialize(existeContactAccepte);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }

  public void creerPersonneContact(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("newPersonneContact");
    PersonneContactDto personneContactAVerif = factory.getPersonneContactVide();

    Genson ge = new GensonBuilder().useIndentation(true).create();
    ge.deserializeInto(json, personneContactAVerif);
    PersonneContactDto personneContactDb =
        personneContactUcc.creerPersonneContact(personneContactAVerif);
    // System.out.println("personneContactAVerif : " + personneContactDb);
    if (personneContactDb != null) {
      Genson gen = new GensonBuilder().useIndentation(true).create();
      json = gen.serialize(personneContactDb);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }

  }

  private void visualiserEntreprises(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    List<EntrepriseDto> entreprises = entrepriseUcc.visualiserEntreprises();
    if (entreprises != null) {
      json = genson.serialize(entreprises);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }

  }

  private void getEntreprise(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    int idEntreprise = Integer.parseInt(req.getParameter("idEntreprise"));
    EntrepriseDto entrepriseDto = entrepriseUcc.getEntreprise(idEntreprise);
    if (entrepriseDto != null) {
      Genson gen = new GensonBuilder().useIndentation(true).create();
      json = gen.serialize(entrepriseDto);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      // entreprise n'existe pas en db
      renvoyerCodeErrEtMess(resp, "Action Interdite", 401);
    }
  }

  private void visualiserPersonnesContact(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    int idEntreprise = Integer.parseInt(req.getParameter("idEntreprise"));
    List<PersonneContactDto> personnes =
        personneContactUcc.visualiserPersonnesContact(idEntreprise);
    if (personnes != null) {
      String json = genson.serialize(personnes);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      // entreprise n'existe pas en db
      renvoyerCodeErrEtMess(resp, "Action Interdite", 401);
    }

  }

  private void visualiserUsersEtResponsables(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    List<UserDto> users = userUcc.visualiserUsersAnneeCourante();
    List<PersonneContactDto> responsables = personneContactUcc.visualiserResponsablesStage();
    if (users != null && responsables != null) {
      // test Stream
      List<Object> merged =
          Stream.concat(users.stream(), responsables.stream()).collect(Collectors.toList());

      // test arraylist
      // List<Object> merged = new ArrayList<>();
      // merged.addAll(users);
      // merged.addAll(responsables);

      // test hashmap
      // Map<String, Object> merged = new HashMap<>();
      // merged.put("users", users);
      // merged.put("responsables", responsables);

      Genson ge = new GensonBuilder().useIndentation(true).exclude("mdp").create();
      json = ge.serialize(merged);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }

  }

  private void visualiserStudCurYear(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    List<UserDto> users = userUcc.visualiserUsersAnneeCourante();
    if (users != null) {
      Genson ge = new GensonBuilder().useIndentation(true).exclude("mdp").create();
      json = ge.serialize(users);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  private void renvoyerCodeErr(HttpServletResponse resp, Exception ex, int code)
      throws IOException {
    json = ex.getMessage();
    resp.setStatus(code);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    ex.printStackTrace();
    System.out.println(ex.getMessage());
  }

  private void renvoyerCodeErrEtMess(HttpServletResponse resp, String messageErreur, int code)
      throws IOException {
    resp.setStatus(code);
    resp.setContentType("application/json");
    resp.getOutputStream().write(messageErreur.getBytes(Charset.forName("UTF-8")));
  }

  private void renvoyerCodeErrEtMessEtObj(HttpServletResponse resp, String messageErreur, int code,
      Object object, Genson gens) throws IOException {
    Map<String, Object> infosRetour = new HashMap<String, Object>() {
      {
        put("message", messageErreur);
        put("objetDb", object);
      }
    };

    String json = gens.serialize(infosRetour);
    resp.setStatus(code);
    resp.setContentType("application/json");
    resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
  }


  private void signin(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    json = req.getParameter("userAVerif");
    UserDto userAVerif = factory.getUserVide();
    genson.deserializeInto(json, userAVerif);

    // si l utilisateur peut se connecter
    UserDto userDb = userUcc.seConnecter(userAVerif);

    if (userDb != null) {
      Genson ge = new GensonBuilder().useIndentation(true).exclude("mdp").exclude("tel")
          .exclude("email").exclude("dateInscription").exclude("dateNaissance").create();
      json = ge.serialize(userDb);

      startSession(userDb, req, resp);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Le login ou le mdp est incorrect", 401);
    }
  }

  private void signup(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    // TODO gérer la session lors de l'inscription

    json = req.getParameter("newUser");
    UserDto userAVerif = factory.getUserVide();

    Genson ge = new GensonBuilder().useIndentation(true).exclude("dateNaissance").create();
    ge.deserializeInto(json, userAVerif);


    userAVerif.setDateNaissance(Util.jsonToLocalDate(json, "dateNaissance"));

    UserDto userDb = userUcc.sinscrire(userAVerif);
    if (userDb != null) {
      Genson gen = new GensonBuilder().useIndentation(true).exclude("mdp").exclude("tel")
          .exclude("email").exclude("dateInscription").exclude("dateNaissance").create();
      json = gen.serialize(userDb);

      startSession(userDb, req, resp);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  private void setMdpUser(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    json = req.getParameter("user");
    String mdpActuel = req.getParameter("mdpActuel");
    String newMdp1 = req.getParameter("nouveauMdp1");
    String newMdp2 = req.getParameter("nouveauMdp2");

    UserDto userAVerifier = factory.getUserVide();

    Genson ge = new GensonBuilder().useIndentation(true).exclude("dateNaissance").create();
    ge.deserializeInto(json, userAVerifier);

    userAVerifier.setDateNaissance(Util.jsonToLocalDate(json, "dateNaissance"));

    UserDto userAVerif = userUcc.trouverUtilisateurById(userAVerifier);

    if (Util.checkpw(mdpActuel, userAVerif.getMdp()) && newMdp1.equals(newMdp2)) {

      boolean toReturn = userUcc.updateMdpUtilisateur(userAVerif, newMdp1);

      if (toReturn) {
        resp.setContentType("application/json");
        resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
      }
    }
  }

  private void setInfosPersoUser(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    json = req.getParameter("user");
    UserDto newInfosPersoAVerif = factory.getUserVide();

    Genson ge = new GensonBuilder().useIndentation(true).exclude("dateNaissance").create();
    ge.deserializeInto(json, newInfosPersoAVerif);
    newInfosPersoAVerif.setIdUtilisateur(currentUser.getIdUtilisateur());
    newInfosPersoAVerif.setDateNaissance(Util.jsonToLocalDate(json, "dateNaissance"));
    UserDto userDb;
    Genson gen =
        new GensonBuilder().useIndentation(true).exclude("mdp").exclude("dateInscription").create();

    try {
      userDb = userUcc.updateInfoUtilisateur(newInfosPersoAVerif);

      if (userDb != null) {
        json = gen.serialize(userDb);
        req.getSession().setAttribute("userDb", userDb);
        resp.setContentType("application/json");
        resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
      } else {
        renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
      }
    } catch (OptimisticLockException ex) {
      userDb = (UserDto) ex.getObjetEnDb();
      req.getSession().setAttribute("userDb", userDb);
      renvoyerCodeErrEtMessEtObj(resp, ex.getMessage(), 409, userDb, gen);
    }

  }

  private void getInfosPersoUser(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {

    UserDto infosPerso = currentUser;
    if (infosPerso != null) {

      Genson ge = new GensonBuilder().useIndentation(true).exclude("mdp", UserImpl.class)
          .exclude("dateInscription", UserImpl.class).create();

      json = ge.serialize(infosPerso);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    } else {
      renvoyerCodeErrEtMess(resp, "Erreur de programmation", 500);
    }
  }

  private void whoami(HttpServletRequest req, HttpServletResponse resp) throws IOException {

    UserDto whoami = getCurrentUser(req);
    if (whoami != null) {
      Genson ge = new GensonBuilder().useIndentation(true).exclude("mdp", UserImpl.class)
          .exclude("dateInscription", UserImpl.class).create();

      json = ge.serialize(whoami);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));

    } else {
      json = genson.serialize(whoami);
      resp.setContentType("application/json");
      resp.getOutputStream().write(json.getBytes(Charset.forName("UTF-8")));
    }
  }

  private void startSession(UserDto user, HttpServletRequest req, HttpServletResponse resp) {
    req.getSession().setAttribute("userDb", user);

    Map<String, Object> claims = new HashMap<>();
    claims.put("idUtilisateur", user.getIdUtilisateur());
    claims.put("ip", req.getRemoteAddr());

    String secret = appContext.getValueProp("JWTSecret");

    String token = new JWTSigner(secret).sign(claims);

    Cookie cookie = new Cookie("token", token);
    cookie.setPath("/");
    cookie.setMaxAge(60 * 60 * 24 * 365);
    resp.addCookie(cookie);
  }

  private UserDto getCurrentUser(HttpServletRequest req) {

    UserDto whoami = (UserDto) req.getSession().getAttribute("userDb");
    if (whoami != null) {
      return whoami;
    }
    String token = null;

    Cookie[] cookies = req.getCookies();
    if (cookies != null) {
      for (Cookie cookie : cookies) {
        if ("token".equals(cookie.getName()) && cookie.getSecure()) {
          token = cookie.getValue();
        } else if ("token".equals(cookie.getName()) && token == null) {
          token = cookie.getValue();
        }
      }
    }
    if (token == null) {
      return null;
    }

    try {
      Map<String, Object> decodedPayload =
          new JWTVerifier(appContext.getValueProp("JWTSecret")).verify(token);
      /**
       * stocké dans token idealement: date expiration id qui a distribue le token
       */
      if (!req.getRemoteAddr().equals(decodedPayload.get("ip"))) {
        return null;
      }

      UserDto userAVerif = factory.getUserVide();
      userAVerif.setIdUtilisateur((int) decodedPayload.get("idUtilisateur"));
      whoami = userUcc.trouverUtilisateurById(userAVerif);

      if (whoami != null) {
        req.getSession().setAttribute("userDb", whoami);
      }
    } catch (Exception ex) {
      System.out.println("pas de token");
      ex.printStackTrace();
    }
    // System.out.println(whoami.toString());
    return whoami;
  }

  private void logout(HttpServletRequest req, HttpServletResponse resp) {
    req.getSession().invalidate();
    Cookie cookie = new Cookie("token", "");
    cookie.setPath("/");
    cookie.setMaxAge(0);
    resp.addCookie(cookie);
  }


  // 1. session?
  // 2.1 si oui --> authentifie
  // 2.2 sinon token?
  // 2.2.1 pas de token --> login
  // 2.2.2 token --> utilise le token pour recréer une nouvelle session, chercher user db et mettre
  // dans session ()

}
